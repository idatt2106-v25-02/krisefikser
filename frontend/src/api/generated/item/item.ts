/**
 * Generated by orval v7.9.0 üç∫
 * Do not edit manually.
 * Krisefikser API
 * API for the Krisefikser application
 * OpenAPI spec version: 1.0
 */
import { useMutation, useQuery } from '@tanstack/vue-query'
import type {
  DataTag,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationReturnType,
  UseQueryOptions,
  UseQueryReturnType,
} from '@tanstack/vue-query'

import { unref } from 'vue'
import type { MaybeRef } from 'vue'

import type {
  ChecklistItemResponse,
  CreateFoodItemRequest,
  FoodItemResponse,
  InventorySummaryResponse,
} from '.././model'

import { customInstance } from '../../axios'
import type { ErrorType, BodyType } from '../../axios'

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1]

/**
 * @summary Set the total amount of water in liters for your active household
 */
export const setWaterAmount = (
  amount: MaybeRef<number>,
  options?: SecondParameter<typeof customInstance>,
) => {
  amount = unref(amount)

  return customInstance<void>(
    { url: `http://localhost:8080/api/items/water/${amount}`, method: 'PUT' },
    options,
  )
}

export const getSetWaterAmountMutationOptions = <
  TError = ErrorType<void>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof setWaterAmount>>,
    TError,
    { amount: number },
    TContext
  >
  request?: SecondParameter<typeof customInstance>
}): UseMutationOptions<
  Awaited<ReturnType<typeof setWaterAmount>>,
  TError,
  { amount: number },
  TContext
> => {
  const mutationKey = ['setWaterAmount']
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof setWaterAmount>>,
    { amount: number }
  > = (props) => {
    const { amount } = props ?? {}

    return setWaterAmount(amount, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type SetWaterAmountMutationResult = NonNullable<Awaited<ReturnType<typeof setWaterAmount>>>

export type SetWaterAmountMutationError = ErrorType<void>

/**
 * @summary Set the total amount of water in liters for your active household
 */
export const useSetWaterAmount = <TError = ErrorType<void>, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof setWaterAmount>>,
      TError,
      { amount: number },
      TContext
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient,
): UseMutationReturnType<
  Awaited<ReturnType<typeof setWaterAmount>>,
  TError,
  { amount: number },
  TContext
> => {
  const mutationOptions = getSetWaterAmountMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}
/**
 * @summary Update a food item
 */
export const updateFoodItem = (
  id: MaybeRef<string>,
  createFoodItemRequest: MaybeRef<CreateFoodItemRequest>,
  options?: SecondParameter<typeof customInstance>,
) => {
  id = unref(id)
  createFoodItemRequest = unref(createFoodItemRequest)

  return customInstance<FoodItemResponse>(
    {
      url: `http://localhost:8080/api/items/food/${id}`,
      method: 'PUT',
      headers: { 'Content-Type': 'application/json' },
      data: createFoodItemRequest,
    },
    options,
  )
}

export const getUpdateFoodItemMutationOptions = <
  TError = ErrorType<FoodItemResponse>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateFoodItem>>,
    TError,
    { id: string; data: BodyType<CreateFoodItemRequest> },
    TContext
  >
  request?: SecondParameter<typeof customInstance>
}): UseMutationOptions<
  Awaited<ReturnType<typeof updateFoodItem>>,
  TError,
  { id: string; data: BodyType<CreateFoodItemRequest> },
  TContext
> => {
  const mutationKey = ['updateFoodItem']
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof updateFoodItem>>,
    { id: string; data: BodyType<CreateFoodItemRequest> }
  > = (props) => {
    const { id, data } = props ?? {}

    return updateFoodItem(id, data, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type UpdateFoodItemMutationResult = NonNullable<Awaited<ReturnType<typeof updateFoodItem>>>
export type UpdateFoodItemMutationBody = BodyType<CreateFoodItemRequest>
export type UpdateFoodItemMutationError = ErrorType<FoodItemResponse>

/**
 * @summary Update a food item
 */
export const useUpdateFoodItem = <TError = ErrorType<FoodItemResponse>, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof updateFoodItem>>,
      TError,
      { id: string; data: BodyType<CreateFoodItemRequest> },
      TContext
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient,
): UseMutationReturnType<
  Awaited<ReturnType<typeof updateFoodItem>>,
  TError,
  { id: string; data: BodyType<CreateFoodItemRequest> },
  TContext
> => {
  const mutationOptions = getUpdateFoodItemMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}
/**
 * @summary Delete a food item
 */
export const deleteFoodItem = (
  id: MaybeRef<string>,
  options?: SecondParameter<typeof customInstance>,
) => {
  id = unref(id)

  return customInstance<void>(
    { url: `http://localhost:8080/api/items/food/${id}`, method: 'DELETE' },
    options,
  )
}

export const getDeleteFoodItemMutationOptions = <
  TError = ErrorType<void>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteFoodItem>>,
    TError,
    { id: string },
    TContext
  >
  request?: SecondParameter<typeof customInstance>
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteFoodItem>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationKey = ['deleteFoodItem']
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined }

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteFoodItem>>, { id: string }> = (
    props,
  ) => {
    const { id } = props ?? {}

    return deleteFoodItem(id, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type DeleteFoodItemMutationResult = NonNullable<Awaited<ReturnType<typeof deleteFoodItem>>>

export type DeleteFoodItemMutationError = ErrorType<void>

/**
 * @summary Delete a food item
 */
export const useDeleteFoodItem = <TError = ErrorType<void>, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof deleteFoodItem>>,
      TError,
      { id: string },
      TContext
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient,
): UseMutationReturnType<
  Awaited<ReturnType<typeof deleteFoodItem>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationOptions = getDeleteFoodItemMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}
/**
 * @summary Toggle checklist item
 */
export const toggleChecklistItem = (
  id: MaybeRef<string>,
  options?: SecondParameter<typeof customInstance>,
) => {
  id = unref(id)

  return customInstance<ChecklistItemResponse>(
    { url: `http://localhost:8080/api/items/checklist/${id}`, method: 'PUT' },
    options,
  )
}

export const getToggleChecklistItemMutationOptions = <
  TError = ErrorType<ChecklistItemResponse>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof toggleChecklistItem>>,
    TError,
    { id: string },
    TContext
  >
  request?: SecondParameter<typeof customInstance>
}): UseMutationOptions<
  Awaited<ReturnType<typeof toggleChecklistItem>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationKey = ['toggleChecklistItem']
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof toggleChecklistItem>>,
    { id: string }
  > = (props) => {
    const { id } = props ?? {}

    return toggleChecklistItem(id, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type ToggleChecklistItemMutationResult = NonNullable<
  Awaited<ReturnType<typeof toggleChecklistItem>>
>

export type ToggleChecklistItemMutationError = ErrorType<ChecklistItemResponse>

/**
 * @summary Toggle checklist item
 */
export const useToggleChecklistItem = <
  TError = ErrorType<ChecklistItemResponse>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof toggleChecklistItem>>,
      TError,
      { id: string },
      TContext
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient,
): UseMutationReturnType<
  Awaited<ReturnType<typeof toggleChecklistItem>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationOptions = getToggleChecklistItemMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}
/**
 * @summary Get all food items
 */
export const getAllFoodItems = (
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<FoodItemResponse[]>(
    { url: `http://localhost:8080/api/items/food`, method: 'GET', signal },
    options,
  )
}

export const getGetAllFoodItemsQueryKey = () => {
  return ['http:', 'localhost:8080', 'api', 'items', 'food'] as const
}

export const getGetAllFoodItemsQueryOptions = <
  TData = Awaited<ReturnType<typeof getAllFoodItems>>,
  TError = ErrorType<FoodItemResponse[]>,
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllFoodItems>>, TError, TData>>
  request?: SecondParameter<typeof customInstance>
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = getGetAllFoodItemsQueryKey()

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getAllFoodItems>>> = ({ signal }) =>
    getAllFoodItems(requestOptions, signal)

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getAllFoodItems>>,
    TError,
    TData
  >
}

export type GetAllFoodItemsQueryResult = NonNullable<Awaited<ReturnType<typeof getAllFoodItems>>>
export type GetAllFoodItemsQueryError = ErrorType<FoodItemResponse[]>

/**
 * @summary Get all food items
 */

export function useGetAllFoodItems<
  TData = Awaited<ReturnType<typeof getAllFoodItems>>,
  TError = ErrorType<FoodItemResponse[]>,
>(
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllFoodItems>>, TError, TData>>
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient,
): UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getGetAllFoodItemsQueryOptions(options)

  const query = useQuery(queryOptions, queryClient) as UseQueryReturnType<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>
  }

  query.queryKey = unref(queryOptions).queryKey as DataTag<QueryKey, TData, TError>

  return query
}

/**
 * @summary Create a new food item
 */
export const createFoodItem = (
  createFoodItemRequest: MaybeRef<CreateFoodItemRequest>,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  createFoodItemRequest = unref(createFoodItemRequest)

  return customInstance<FoodItemResponse>(
    {
      url: `http://localhost:8080/api/items/food`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: createFoodItemRequest,
      signal,
    },
    options,
  )
}

export const getCreateFoodItemMutationOptions = <
  TError = ErrorType<FoodItemResponse>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createFoodItem>>,
    TError,
    { data: BodyType<CreateFoodItemRequest> },
    TContext
  >
  request?: SecondParameter<typeof customInstance>
}): UseMutationOptions<
  Awaited<ReturnType<typeof createFoodItem>>,
  TError,
  { data: BodyType<CreateFoodItemRequest> },
  TContext
> => {
  const mutationKey = ['createFoodItem']
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof createFoodItem>>,
    { data: BodyType<CreateFoodItemRequest> }
  > = (props) => {
    const { data } = props ?? {}

    return createFoodItem(data, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type CreateFoodItemMutationResult = NonNullable<Awaited<ReturnType<typeof createFoodItem>>>
export type CreateFoodItemMutationBody = BodyType<CreateFoodItemRequest>
export type CreateFoodItemMutationError = ErrorType<FoodItemResponse>

/**
 * @summary Create a new food item
 */
export const useCreateFoodItem = <TError = ErrorType<FoodItemResponse>, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof createFoodItem>>,
      TError,
      { data: BodyType<CreateFoodItemRequest> },
      TContext
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient,
): UseMutationReturnType<
  Awaited<ReturnType<typeof createFoodItem>>,
  TError,
  { data: BodyType<CreateFoodItemRequest> },
  TContext
> => {
  const mutationOptions = getCreateFoodItemMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}
/**
 * @summary Get inventory summary
 */
export const getInventorySummary = (
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<InventorySummaryResponse>(
    { url: `http://localhost:8080/api/items/summary`, method: 'GET', signal },
    options,
  )
}

export const getGetInventorySummaryQueryKey = () => {
  return ['http:', 'localhost:8080', 'api', 'items', 'summary'] as const
}

export const getGetInventorySummaryQueryOptions = <
  TData = Awaited<ReturnType<typeof getInventorySummary>>,
  TError = ErrorType<InventorySummaryResponse>,
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getInventorySummary>>, TError, TData>>
  request?: SecondParameter<typeof customInstance>
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = getGetInventorySummaryQueryKey()

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getInventorySummary>>> = ({ signal }) =>
    getInventorySummary(requestOptions, signal)

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getInventorySummary>>,
    TError,
    TData
  >
}

export type GetInventorySummaryQueryResult = NonNullable<
  Awaited<ReturnType<typeof getInventorySummary>>
>
export type GetInventorySummaryQueryError = ErrorType<InventorySummaryResponse>

/**
 * @summary Get inventory summary
 */

export function useGetInventorySummary<
  TData = Awaited<ReturnType<typeof getInventorySummary>>,
  TError = ErrorType<InventorySummaryResponse>,
>(
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getInventorySummary>>, TError, TData>>
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient,
): UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getGetInventorySummaryQueryOptions(options)

  const query = useQuery(queryOptions, queryClient) as UseQueryReturnType<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>
  }

  query.queryKey = unref(queryOptions).queryKey as DataTag<QueryKey, TData, TError>

  return query
}

/**
 * @summary Get all checklist items
 */
export const getAllChecklistItems = (
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<ChecklistItemResponse[]>(
    { url: `http://localhost:8080/api/items/checklist`, method: 'GET', signal },
    options,
  )
}

export const getGetAllChecklistItemsQueryKey = () => {
  return ['http:', 'localhost:8080', 'api', 'items', 'checklist'] as const
}

export const getGetAllChecklistItemsQueryOptions = <
  TData = Awaited<ReturnType<typeof getAllChecklistItems>>,
  TError = ErrorType<ChecklistItemResponse[]>,
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllChecklistItems>>, TError, TData>>
  request?: SecondParameter<typeof customInstance>
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = getGetAllChecklistItemsQueryKey()

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getAllChecklistItems>>> = ({ signal }) =>
    getAllChecklistItems(requestOptions, signal)

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getAllChecklistItems>>,
    TError,
    TData
  >
}

export type GetAllChecklistItemsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getAllChecklistItems>>
>
export type GetAllChecklistItemsQueryError = ErrorType<ChecklistItemResponse[]>

/**
 * @summary Get all checklist items
 */

export function useGetAllChecklistItems<
  TData = Awaited<ReturnType<typeof getAllChecklistItems>>,
  TError = ErrorType<ChecklistItemResponse[]>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getAllChecklistItems>>, TError, TData>
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient,
): UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getGetAllChecklistItemsQueryOptions(options)

  const query = useQuery(queryOptions, queryClient) as UseQueryReturnType<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>
  }

  query.queryKey = unref(queryOptions).queryKey as DataTag<QueryKey, TData, TError>

  return query
}
