/**
 * Generated by orval v7.9.0 üç∫
 * Do not edit manually.
 * Krisefikser API
 * API for the Krisefikser application
 * OpenAPI spec version: 1.0
 */
import { useMutation, useQuery } from '@tanstack/vue-query'
import type {
  DataTag,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationReturnType,
  UseQueryOptions,
  UseQueryReturnType,
} from '@tanstack/vue-query'

import { computed, unref } from 'vue'
import type { MaybeRef } from 'vue'

import type {
  CreateReflectionRequest,
  ReflectionResponse,
  UpdateReflectionRequest,
} from '.././model'

import { customInstance } from '../../axios'
import type { ErrorType, BodyType } from '../../axios'

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1]

/**
 * @summary Get a reflection by ID
 */
export const getReflectionById = (
  id: MaybeRef<string>,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  id = unref(id)

  return customInstance<ReflectionResponse>(
    { url: `http://localhost:8080/api/reflections/${id}`, method: 'GET', signal },
    options,
  )
}

export const getGetReflectionByIdQueryKey = (id: MaybeRef<string>) => {
  return ['http:', 'localhost:8080', 'api', 'reflections', id] as const
}

export const getGetReflectionByIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getReflectionById>>,
  TError = ErrorType<ReflectionResponse>,
>(
  id: MaybeRef<string>,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getReflectionById>>, TError, TData>>
    request?: SecondParameter<typeof customInstance>
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = getGetReflectionByIdQueryKey(id)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getReflectionById>>> = ({ signal }) =>
    getReflectionById(id, requestOptions, signal)

  return {
    queryKey,
    queryFn,
    enabled: computed(() => !!unref(id)),
    ...queryOptions,
  } as UseQueryOptions<Awaited<ReturnType<typeof getReflectionById>>, TError, TData>
}

export type GetReflectionByIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getReflectionById>>
>
export type GetReflectionByIdQueryError = ErrorType<ReflectionResponse>

/**
 * @summary Get a reflection by ID
 */

export function useGetReflectionById<
  TData = Awaited<ReturnType<typeof getReflectionById>>,
  TError = ErrorType<ReflectionResponse>,
>(
  id: MaybeRef<string>,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getReflectionById>>, TError, TData>>
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient,
): UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getGetReflectionByIdQueryOptions(id, options)

  const query = useQuery(queryOptions, queryClient) as UseQueryReturnType<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>
  }

  query.queryKey = unref(queryOptions).queryKey as DataTag<QueryKey, TData, TError>

  return query
}

/**
 * @summary Update a reflection
 */
export const updateReflection = (
  id: MaybeRef<string>,
  updateReflectionRequest: MaybeRef<UpdateReflectionRequest>,
  options?: SecondParameter<typeof customInstance>,
) => {
  id = unref(id)
  updateReflectionRequest = unref(updateReflectionRequest)

  return customInstance<ReflectionResponse>(
    {
      url: `http://localhost:8080/api/reflections/${id}`,
      method: 'PUT',
      headers: { 'Content-Type': 'application/json' },
      data: updateReflectionRequest,
    },
    options,
  )
}

export const getUpdateReflectionMutationOptions = <
  TError = ErrorType<ReflectionResponse>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateReflection>>,
    TError,
    { id: string; data: BodyType<UpdateReflectionRequest> },
    TContext
  >
  request?: SecondParameter<typeof customInstance>
}): UseMutationOptions<
  Awaited<ReturnType<typeof updateReflection>>,
  TError,
  { id: string; data: BodyType<UpdateReflectionRequest> },
  TContext
> => {
  const mutationKey = ['updateReflection']
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof updateReflection>>,
    { id: string; data: BodyType<UpdateReflectionRequest> }
  > = (props) => {
    const { id, data } = props ?? {}

    return updateReflection(id, data, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type UpdateReflectionMutationResult = NonNullable<
  Awaited<ReturnType<typeof updateReflection>>
>
export type UpdateReflectionMutationBody = BodyType<UpdateReflectionRequest>
export type UpdateReflectionMutationError = ErrorType<ReflectionResponse>

/**
 * @summary Update a reflection
 */
export const useUpdateReflection = <TError = ErrorType<ReflectionResponse>, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof updateReflection>>,
      TError,
      { id: string; data: BodyType<UpdateReflectionRequest> },
      TContext
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient,
): UseMutationReturnType<
  Awaited<ReturnType<typeof updateReflection>>,
  TError,
  { id: string; data: BodyType<UpdateReflectionRequest> },
  TContext
> => {
  const mutationOptions = getUpdateReflectionMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}
/**
 * @summary Delete a reflection
 */
export const deleteReflection = (
  id: MaybeRef<string>,
  options?: SecondParameter<typeof customInstance>,
) => {
  id = unref(id)

  return customInstance<void>(
    { url: `http://localhost:8080/api/reflections/${id}`, method: 'DELETE' },
    options,
  )
}

export const getDeleteReflectionMutationOptions = <
  TError = ErrorType<void>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteReflection>>,
    TError,
    { id: string },
    TContext
  >
  request?: SecondParameter<typeof customInstance>
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteReflection>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationKey = ['deleteReflection']
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteReflection>>,
    { id: string }
  > = (props) => {
    const { id } = props ?? {}

    return deleteReflection(id, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type DeleteReflectionMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteReflection>>
>

export type DeleteReflectionMutationError = ErrorType<void>

/**
 * @summary Delete a reflection
 */
export const useDeleteReflection = <TError = ErrorType<void>, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof deleteReflection>>,
      TError,
      { id: string },
      TContext
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient,
): UseMutationReturnType<
  Awaited<ReturnType<typeof deleteReflection>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationOptions = getDeleteReflectionMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}
/**
 * @summary Update any reflection (Admin only)
 */
export const adminUpdateReflection = (
  id: MaybeRef<string>,
  updateReflectionRequest: MaybeRef<UpdateReflectionRequest>,
  options?: SecondParameter<typeof customInstance>,
) => {
  id = unref(id)
  updateReflectionRequest = unref(updateReflectionRequest)

  return customInstance<ReflectionResponse>(
    {
      url: `http://localhost:8080/api/reflections/admin/${id}`,
      method: 'PUT',
      headers: { 'Content-Type': 'application/json' },
      data: updateReflectionRequest,
    },
    options,
  )
}

export const getAdminUpdateReflectionMutationOptions = <
  TError = ErrorType<ReflectionResponse>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof adminUpdateReflection>>,
    TError,
    { id: string; data: BodyType<UpdateReflectionRequest> },
    TContext
  >
  request?: SecondParameter<typeof customInstance>
}): UseMutationOptions<
  Awaited<ReturnType<typeof adminUpdateReflection>>,
  TError,
  { id: string; data: BodyType<UpdateReflectionRequest> },
  TContext
> => {
  const mutationKey = ['adminUpdateReflection']
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof adminUpdateReflection>>,
    { id: string; data: BodyType<UpdateReflectionRequest> }
  > = (props) => {
    const { id, data } = props ?? {}

    return adminUpdateReflection(id, data, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type AdminUpdateReflectionMutationResult = NonNullable<
  Awaited<ReturnType<typeof adminUpdateReflection>>
>
export type AdminUpdateReflectionMutationBody = BodyType<UpdateReflectionRequest>
export type AdminUpdateReflectionMutationError = ErrorType<ReflectionResponse>

/**
 * @summary Update any reflection (Admin only)
 */
export const useAdminUpdateReflection = <
  TError = ErrorType<ReflectionResponse>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof adminUpdateReflection>>,
      TError,
      { id: string; data: BodyType<UpdateReflectionRequest> },
      TContext
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient,
): UseMutationReturnType<
  Awaited<ReturnType<typeof adminUpdateReflection>>,
  TError,
  { id: string; data: BodyType<UpdateReflectionRequest> },
  TContext
> => {
  const mutationOptions = getAdminUpdateReflectionMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}
/**
 * @summary Delete any reflection (Admin only)
 */
export const adminDeleteReflection = (
  id: MaybeRef<string>,
  options?: SecondParameter<typeof customInstance>,
) => {
  id = unref(id)

  return customInstance<void>(
    { url: `http://localhost:8080/api/reflections/admin/${id}`, method: 'DELETE' },
    options,
  )
}

export const getAdminDeleteReflectionMutationOptions = <
  TError = ErrorType<void>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof adminDeleteReflection>>,
    TError,
    { id: string },
    TContext
  >
  request?: SecondParameter<typeof customInstance>
}): UseMutationOptions<
  Awaited<ReturnType<typeof adminDeleteReflection>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationKey = ['adminDeleteReflection']
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof adminDeleteReflection>>,
    { id: string }
  > = (props) => {
    const { id } = props ?? {}

    return adminDeleteReflection(id, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type AdminDeleteReflectionMutationResult = NonNullable<
  Awaited<ReturnType<typeof adminDeleteReflection>>
>

export type AdminDeleteReflectionMutationError = ErrorType<void>

/**
 * @summary Delete any reflection (Admin only)
 */
export const useAdminDeleteReflection = <TError = ErrorType<void>, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof adminDeleteReflection>>,
      TError,
      { id: string },
      TContext
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient,
): UseMutationReturnType<
  Awaited<ReturnType<typeof adminDeleteReflection>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationOptions = getAdminDeleteReflectionMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}
/**
 * @summary Get accessible reflections
 */
export const getAccessibleReflections = (
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<ReflectionResponse[]>(
    { url: `http://localhost:8080/api/reflections`, method: 'GET', signal },
    options,
  )
}

export const getGetAccessibleReflectionsQueryKey = () => {
  return ['http:', 'localhost:8080', 'api', 'reflections'] as const
}

export const getGetAccessibleReflectionsQueryOptions = <
  TData = Awaited<ReturnType<typeof getAccessibleReflections>>,
  TError = ErrorType<ReflectionResponse[]>,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getAccessibleReflections>>, TError, TData>
  >
  request?: SecondParameter<typeof customInstance>
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = getGetAccessibleReflectionsQueryKey()

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getAccessibleReflections>>> = ({
    signal,
  }) => getAccessibleReflections(requestOptions, signal)

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getAccessibleReflections>>,
    TError,
    TData
  >
}

export type GetAccessibleReflectionsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getAccessibleReflections>>
>
export type GetAccessibleReflectionsQueryError = ErrorType<ReflectionResponse[]>

/**
 * @summary Get accessible reflections
 */

export function useGetAccessibleReflections<
  TData = Awaited<ReturnType<typeof getAccessibleReflections>>,
  TError = ErrorType<ReflectionResponse[]>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getAccessibleReflections>>, TError, TData>
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient,
): UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getGetAccessibleReflectionsQueryOptions(options)

  const query = useQuery(queryOptions, queryClient) as UseQueryReturnType<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>
  }

  query.queryKey = unref(queryOptions).queryKey as DataTag<QueryKey, TData, TError>

  return query
}

/**
 * @summary Create a new reflection
 */
export const createReflection = (
  createReflectionRequest: MaybeRef<CreateReflectionRequest>,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  createReflectionRequest = unref(createReflectionRequest)

  return customInstance<ReflectionResponse>(
    {
      url: `http://localhost:8080/api/reflections`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: createReflectionRequest,
      signal,
    },
    options,
  )
}

export const getCreateReflectionMutationOptions = <
  TError = ErrorType<ReflectionResponse>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createReflection>>,
    TError,
    { data: BodyType<CreateReflectionRequest> },
    TContext
  >
  request?: SecondParameter<typeof customInstance>
}): UseMutationOptions<
  Awaited<ReturnType<typeof createReflection>>,
  TError,
  { data: BodyType<CreateReflectionRequest> },
  TContext
> => {
  const mutationKey = ['createReflection']
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof createReflection>>,
    { data: BodyType<CreateReflectionRequest> }
  > = (props) => {
    const { data } = props ?? {}

    return createReflection(data, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type CreateReflectionMutationResult = NonNullable<
  Awaited<ReturnType<typeof createReflection>>
>
export type CreateReflectionMutationBody = BodyType<CreateReflectionRequest>
export type CreateReflectionMutationError = ErrorType<ReflectionResponse>

/**
 * @summary Create a new reflection
 */
export const useCreateReflection = <TError = ErrorType<ReflectionResponse>, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof createReflection>>,
      TError,
      { data: BodyType<CreateReflectionRequest> },
      TContext
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient,
): UseMutationReturnType<
  Awaited<ReturnType<typeof createReflection>>,
  TError,
  { data: BodyType<CreateReflectionRequest> },
  TContext
> => {
  const mutationOptions = getCreateReflectionMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}
/**
 * @summary Get public reflections
 */
export const getPublicReflections = (
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<ReflectionResponse[]>(
    { url: `http://localhost:8080/api/reflections/public`, method: 'GET', signal },
    options,
  )
}

export const getGetPublicReflectionsQueryKey = () => {
  return ['http:', 'localhost:8080', 'api', 'reflections', 'public'] as const
}

export const getGetPublicReflectionsQueryOptions = <
  TData = Awaited<ReturnType<typeof getPublicReflections>>,
  TError = ErrorType<ReflectionResponse[]>,
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getPublicReflections>>, TError, TData>>
  request?: SecondParameter<typeof customInstance>
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = getGetPublicReflectionsQueryKey()

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getPublicReflections>>> = ({ signal }) =>
    getPublicReflections(requestOptions, signal)

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getPublicReflections>>,
    TError,
    TData
  >
}

export type GetPublicReflectionsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getPublicReflections>>
>
export type GetPublicReflectionsQueryError = ErrorType<ReflectionResponse[]>

/**
 * @summary Get public reflections
 */

export function useGetPublicReflections<
  TData = Awaited<ReturnType<typeof getPublicReflections>>,
  TError = ErrorType<ReflectionResponse[]>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getPublicReflections>>, TError, TData>
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient,
): UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getGetPublicReflectionsQueryOptions(options)

  const query = useQuery(queryOptions, queryClient) as UseQueryReturnType<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>
  }

  query.queryKey = unref(queryOptions).queryKey as DataTag<QueryKey, TData, TError>

  return query
}

/**
 * @summary Get my reflections
 */
export const getCurrentUserReflections = (
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<ReflectionResponse[]>(
    { url: `http://localhost:8080/api/reflections/my`, method: 'GET', signal },
    options,
  )
}

export const getGetCurrentUserReflectionsQueryKey = () => {
  return ['http:', 'localhost:8080', 'api', 'reflections', 'my'] as const
}

export const getGetCurrentUserReflectionsQueryOptions = <
  TData = Awaited<ReturnType<typeof getCurrentUserReflections>>,
  TError = ErrorType<ReflectionResponse[]>,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getCurrentUserReflections>>, TError, TData>
  >
  request?: SecondParameter<typeof customInstance>
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = getGetCurrentUserReflectionsQueryKey()

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getCurrentUserReflections>>> = ({
    signal,
  }) => getCurrentUserReflections(requestOptions, signal)

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getCurrentUserReflections>>,
    TError,
    TData
  >
}

export type GetCurrentUserReflectionsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getCurrentUserReflections>>
>
export type GetCurrentUserReflectionsQueryError = ErrorType<ReflectionResponse[]>

/**
 * @summary Get my reflections
 */

export function useGetCurrentUserReflections<
  TData = Awaited<ReturnType<typeof getCurrentUserReflections>>,
  TError = ErrorType<ReflectionResponse[]>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getCurrentUserReflections>>, TError, TData>
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient,
): UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getGetCurrentUserReflectionsQueryOptions(options)

  const query = useQuery(queryOptions, queryClient) as UseQueryReturnType<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>
  }

  query.queryKey = unref(queryOptions).queryKey as DataTag<QueryKey, TData, TError>

  return query
}

/**
 * @summary Get household reflections
 */
export const getHouseholdReflections = (
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<ReflectionResponse[]>(
    { url: `http://localhost:8080/api/reflections/household`, method: 'GET', signal },
    options,
  )
}

export const getGetHouseholdReflectionsQueryKey = () => {
  return ['http:', 'localhost:8080', 'api', 'reflections', 'household'] as const
}

export const getGetHouseholdReflectionsQueryOptions = <
  TData = Awaited<ReturnType<typeof getHouseholdReflections>>,
  TError = ErrorType<ReflectionResponse[]>,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getHouseholdReflections>>, TError, TData>
  >
  request?: SecondParameter<typeof customInstance>
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = getGetHouseholdReflectionsQueryKey()

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getHouseholdReflections>>> = ({
    signal,
  }) => getHouseholdReflections(requestOptions, signal)

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getHouseholdReflections>>,
    TError,
    TData
  >
}

export type GetHouseholdReflectionsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getHouseholdReflections>>
>
export type GetHouseholdReflectionsQueryError = ErrorType<ReflectionResponse[]>

/**
 * @summary Get household reflections
 */

export function useGetHouseholdReflections<
  TData = Awaited<ReturnType<typeof getHouseholdReflections>>,
  TError = ErrorType<ReflectionResponse[]>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getHouseholdReflections>>, TError, TData>
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient,
): UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getGetHouseholdReflectionsQueryOptions(options)

  const query = useQuery(queryOptions, queryClient) as UseQueryReturnType<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>
  }

  query.queryKey = unref(queryOptions).queryKey as DataTag<QueryKey, TData, TError>

  return query
}

/**
 * @summary Get all reflections (Admin only)
 */
export const getAllReflections = (
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<ReflectionResponse[]>(
    { url: `http://localhost:8080/api/reflections/admin/all`, method: 'GET', signal },
    options,
  )
}

export const getGetAllReflectionsQueryKey = () => {
  return ['http:', 'localhost:8080', 'api', 'reflections', 'admin', 'all'] as const
}

export const getGetAllReflectionsQueryOptions = <
  TData = Awaited<ReturnType<typeof getAllReflections>>,
  TError = ErrorType<ReflectionResponse[]>,
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllReflections>>, TError, TData>>
  request?: SecondParameter<typeof customInstance>
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = getGetAllReflectionsQueryKey()

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getAllReflections>>> = ({ signal }) =>
    getAllReflections(requestOptions, signal)

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getAllReflections>>,
    TError,
    TData
  >
}

export type GetAllReflectionsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getAllReflections>>
>
export type GetAllReflectionsQueryError = ErrorType<ReflectionResponse[]>

/**
 * @summary Get all reflections (Admin only)
 */

export function useGetAllReflections<
  TData = Awaited<ReturnType<typeof getAllReflections>>,
  TError = ErrorType<ReflectionResponse[]>,
>(
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllReflections>>, TError, TData>>
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient,
): UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getGetAllReflectionsQueryOptions(options)

  const query = useQuery(queryOptions, queryClient) as UseQueryReturnType<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>
  }

  query.queryKey = unref(queryOptions).queryKey as DataTag<QueryKey, TData, TError>

  return query
}
