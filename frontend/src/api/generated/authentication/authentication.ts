/**
 * Generated by orval v7.9.0 üç∫
 * Do not edit manually.
 * Krisefikser API
 * API for the Krisefikser application
 * OpenAPI spec version: 1.0
 */
import { useMutation, useQuery } from '@tanstack/vue-query'
import type {
  DataTag,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationReturnType,
  UseQueryOptions,
  UseQueryReturnType,
} from '@tanstack/vue-query'

import { unref } from 'vue'
import type { MaybeRef } from 'vue'

import type {
  AdminInviteRequest,
  CompletePasswordResetRequest,
  LoginRequest,
  LoginResponse,
  PasswordResetResponse,
  RefreshRequest,
  RefreshResponse,
  RegisterRequest,
  RegisterResponse,
  RequestPasswordResetRequest,
  UpdatePasswordRequest,
  UpdatePasswordResponse,
  UserResponse,
  VerifyAdminInviteToken200,
  VerifyAdminInviteTokenParams,
  VerifyAdminLoginParams,
  VerifyEmailParams,
} from '.././model'

import { customInstance } from '../../axios'
import type { ErrorType, BodyType } from '../../axios'

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1]

/**
 * Verifies user's email address using a token
 * @summary Verify email address
 */
export const verifyEmail = (
  params: MaybeRef<VerifyEmailParams>,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  params = unref(params)

  return customInstance<string>(
    {
      url: `http://localhost:8080/api/auth/verify-email`,
      method: 'POST',
      params: unref(params),
      signal,
    },
    options,
  )
}

export const getVerifyEmailMutationOptions = <
  TError = ErrorType<string>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof verifyEmail>>,
    TError,
    { params: VerifyEmailParams },
    TContext
  >
  request?: SecondParameter<typeof customInstance>
}): UseMutationOptions<
  Awaited<ReturnType<typeof verifyEmail>>,
  TError,
  { params: VerifyEmailParams },
  TContext
> => {
  const mutationKey = ['verifyEmail']
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof verifyEmail>>,
    { params: VerifyEmailParams }
  > = (props) => {
    const { params } = props ?? {}

    return verifyEmail(params, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type VerifyEmailMutationResult = NonNullable<Awaited<ReturnType<typeof verifyEmail>>>

export type VerifyEmailMutationError = ErrorType<string>

/**
 * @summary Verify email address
 */
export const useVerifyEmail = <TError = ErrorType<string>, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof verifyEmail>>,
      TError,
      { params: VerifyEmailParams },
      TContext
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient,
): UseMutationReturnType<
  Awaited<ReturnType<typeof verifyEmail>>,
  TError,
  { params: VerifyEmailParams },
  TContext
> => {
  const mutationOptions = getVerifyEmailMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}
export const verifyAdminLogin = (
  params: MaybeRef<VerifyAdminLoginParams>,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  params = unref(params)

  return customInstance<LoginResponse>(
    {
      url: `http://localhost:8080/api/auth/verify-admin-login`,
      method: 'POST',
      params: unref(params),
      signal,
    },
    options,
  )
}

export const getVerifyAdminLoginMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof verifyAdminLogin>>,
    TError,
    { params: VerifyAdminLoginParams },
    TContext
  >
  request?: SecondParameter<typeof customInstance>
}): UseMutationOptions<
  Awaited<ReturnType<typeof verifyAdminLogin>>,
  TError,
  { params: VerifyAdminLoginParams },
  TContext
> => {
  const mutationKey = ['verifyAdminLogin']
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof verifyAdminLogin>>,
    { params: VerifyAdminLoginParams }
  > = (props) => {
    const { params } = props ?? {}

    return verifyAdminLogin(params, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type VerifyAdminLoginMutationResult = NonNullable<
  Awaited<ReturnType<typeof verifyAdminLogin>>
>

export type VerifyAdminLoginMutationError = ErrorType<unknown>

export const useVerifyAdminLogin = <TError = ErrorType<unknown>, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof verifyAdminLogin>>,
      TError,
      { params: VerifyAdminLoginParams },
      TContext
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient,
): UseMutationReturnType<
  Awaited<ReturnType<typeof verifyAdminLogin>>,
  TError,
  { params: VerifyAdminLoginParams },
  TContext
> => {
  const mutationOptions = getVerifyAdminLoginMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}
/**
 * Updates the password of the currently authenticated user
 * @summary Update password
 */
export const updatePassword = (
  updatePasswordRequest: MaybeRef<UpdatePasswordRequest>,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  updatePasswordRequest = unref(updatePasswordRequest)

  return customInstance<UpdatePasswordResponse>(
    {
      url: `http://localhost:8080/api/auth/update-password`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: updatePasswordRequest,
      signal,
    },
    options,
  )
}

export const getUpdatePasswordMutationOptions = <
  TError = ErrorType<UpdatePasswordResponse>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updatePassword>>,
    TError,
    { data: BodyType<UpdatePasswordRequest> },
    TContext
  >
  request?: SecondParameter<typeof customInstance>
}): UseMutationOptions<
  Awaited<ReturnType<typeof updatePassword>>,
  TError,
  { data: BodyType<UpdatePasswordRequest> },
  TContext
> => {
  const mutationKey = ['updatePassword']
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof updatePassword>>,
    { data: BodyType<UpdatePasswordRequest> }
  > = (props) => {
    const { data } = props ?? {}

    return updatePassword(data, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type UpdatePasswordMutationResult = NonNullable<Awaited<ReturnType<typeof updatePassword>>>
export type UpdatePasswordMutationBody = BodyType<UpdatePasswordRequest>
export type UpdatePasswordMutationError = ErrorType<UpdatePasswordResponse>

/**
 * @summary Update password
 */
export const useUpdatePassword = <TError = ErrorType<UpdatePasswordResponse>, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof updatePassword>>,
      TError,
      { data: BodyType<UpdatePasswordRequest> },
      TContext
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient,
): UseMutationReturnType<
  Awaited<ReturnType<typeof updatePassword>>,
  TError,
  { data: BodyType<UpdatePasswordRequest> },
  TContext
> => {
  const mutationOptions = getUpdatePasswordMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}
/**
 * Generates a password reset token and sends it to the user's email
 * @summary Request password reset
 */
export const requestPasswordReset = (
  requestPasswordResetRequest: MaybeRef<RequestPasswordResetRequest>,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  requestPasswordResetRequest = unref(requestPasswordResetRequest)

  return customInstance<PasswordResetResponse>(
    {
      url: `http://localhost:8080/api/auth/request-password-reset`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: requestPasswordResetRequest,
      signal,
    },
    options,
  )
}

export const getRequestPasswordResetMutationOptions = <
  TError = ErrorType<PasswordResetResponse>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof requestPasswordReset>>,
    TError,
    { data: BodyType<RequestPasswordResetRequest> },
    TContext
  >
  request?: SecondParameter<typeof customInstance>
}): UseMutationOptions<
  Awaited<ReturnType<typeof requestPasswordReset>>,
  TError,
  { data: BodyType<RequestPasswordResetRequest> },
  TContext
> => {
  const mutationKey = ['requestPasswordReset']
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof requestPasswordReset>>,
    { data: BodyType<RequestPasswordResetRequest> }
  > = (props) => {
    const { data } = props ?? {}

    return requestPasswordReset(data, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type RequestPasswordResetMutationResult = NonNullable<
  Awaited<ReturnType<typeof requestPasswordReset>>
>
export type RequestPasswordResetMutationBody = BodyType<RequestPasswordResetRequest>
export type RequestPasswordResetMutationError = ErrorType<PasswordResetResponse>

/**
 * @summary Request password reset
 */
export const useRequestPasswordReset = <
  TError = ErrorType<PasswordResetResponse>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof requestPasswordReset>>,
      TError,
      { data: BodyType<RequestPasswordResetRequest> },
      TContext
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient,
): UseMutationReturnType<
  Awaited<ReturnType<typeof requestPasswordReset>>,
  TError,
  { data: BodyType<RequestPasswordResetRequest> },
  TContext
> => {
  const mutationOptions = getRequestPasswordResetMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}
/**
 * Creates a new user account after CAPTCHA verification and input validation
 * @summary Register a new user
 */
export const register = (
  registerRequest: MaybeRef<RegisterRequest>,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  registerRequest = unref(registerRequest)

  return customInstance<RegisterResponse>(
    {
      url: `http://localhost:8080/api/auth/register`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: registerRequest,
      signal,
    },
    options,
  )
}

export const getRegisterMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof register>>,
    TError,
    { data: BodyType<RegisterRequest> },
    TContext
  >
  request?: SecondParameter<typeof customInstance>
}): UseMutationOptions<
  Awaited<ReturnType<typeof register>>,
  TError,
  { data: BodyType<RegisterRequest> },
  TContext
> => {
  const mutationKey = ['register']
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof register>>,
    { data: BodyType<RegisterRequest> }
  > = (props) => {
    const { data } = props ?? {}

    return register(data, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type RegisterMutationResult = NonNullable<Awaited<ReturnType<typeof register>>>
export type RegisterMutationBody = BodyType<RegisterRequest>
export type RegisterMutationError = ErrorType<unknown>

/**
 * @summary Register a new user
 */
export const useRegister = <TError = ErrorType<unknown>, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof register>>,
      TError,
      { data: BodyType<RegisterRequest> },
      TContext
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient,
): UseMutationReturnType<
  Awaited<ReturnType<typeof register>>,
  TError,
  { data: BodyType<RegisterRequest> },
  TContext
> => {
  const mutationOptions = getRegisterMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}
/**
 * Creates a new admin user account after CAPTCHA verification and input validation
 * @summary Register a new admin user
 */
export const registerAdmin = (
  registerRequest: MaybeRef<RegisterRequest>,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  registerRequest = unref(registerRequest)

  return customInstance<RegisterResponse>(
    {
      url: `http://localhost:8080/api/auth/register/admin`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: registerRequest,
      signal,
    },
    options,
  )
}

export const getRegisterAdminMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof registerAdmin>>,
    TError,
    { data: BodyType<RegisterRequest> },
    TContext
  >
  request?: SecondParameter<typeof customInstance>
}): UseMutationOptions<
  Awaited<ReturnType<typeof registerAdmin>>,
  TError,
  { data: BodyType<RegisterRequest> },
  TContext
> => {
  const mutationKey = ['registerAdmin']
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof registerAdmin>>,
    { data: BodyType<RegisterRequest> }
  > = (props) => {
    const { data } = props ?? {}

    return registerAdmin(data, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type RegisterAdminMutationResult = NonNullable<Awaited<ReturnType<typeof registerAdmin>>>
export type RegisterAdminMutationBody = BodyType<RegisterRequest>
export type RegisterAdminMutationError = ErrorType<unknown>

/**
 * @summary Register a new admin user
 */
export const useRegisterAdmin = <TError = ErrorType<unknown>, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof registerAdmin>>,
      TError,
      { data: BodyType<RegisterRequest> },
      TContext
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient,
): UseMutationReturnType<
  Awaited<ReturnType<typeof registerAdmin>>,
  TError,
  { data: BodyType<RegisterRequest> },
  TContext
> => {
  const mutationOptions = getRegisterAdminMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}
/**
 * Generates new access token using refresh token
 * @summary Refresh token
 */
export const refresh = (
  refreshRequest: MaybeRef<RefreshRequest>,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  refreshRequest = unref(refreshRequest)

  return customInstance<RefreshResponse>(
    {
      url: `http://localhost:8080/api/auth/refresh`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: refreshRequest,
      signal,
    },
    options,
  )
}

export const getRefreshMutationOptions = <
  TError = ErrorType<RefreshResponse>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof refresh>>,
    TError,
    { data: BodyType<RefreshRequest> },
    TContext
  >
  request?: SecondParameter<typeof customInstance>
}): UseMutationOptions<
  Awaited<ReturnType<typeof refresh>>,
  TError,
  { data: BodyType<RefreshRequest> },
  TContext
> => {
  const mutationKey = ['refresh']
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof refresh>>,
    { data: BodyType<RefreshRequest> }
  > = (props) => {
    const { data } = props ?? {}

    return refresh(data, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type RefreshMutationResult = NonNullable<Awaited<ReturnType<typeof refresh>>>
export type RefreshMutationBody = BodyType<RefreshRequest>
export type RefreshMutationError = ErrorType<RefreshResponse>

/**
 * @summary Refresh token
 */
export const useRefresh = <TError = ErrorType<RefreshResponse>, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof refresh>>,
      TError,
      { data: BodyType<RefreshRequest> },
      TContext
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient,
): UseMutationReturnType<
  Awaited<ReturnType<typeof refresh>>,
  TError,
  { data: BodyType<RefreshRequest> },
  TContext
> => {
  const mutationOptions = getRefreshMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}
/**
 * Authenticates a user and returns access tokens
 * @summary Login user
 */
export const login = (
  loginRequest: MaybeRef<LoginRequest>,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  loginRequest = unref(loginRequest)

  return customInstance<LoginResponse>(
    {
      url: `http://localhost:8080/api/auth/login`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: loginRequest,
      signal,
    },
    options,
  )
}

export const getLoginMutationOptions = <
  TError = ErrorType<LoginResponse>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof login>>,
    TError,
    { data: BodyType<LoginRequest> },
    TContext
  >
  request?: SecondParameter<typeof customInstance>
}): UseMutationOptions<
  Awaited<ReturnType<typeof login>>,
  TError,
  { data: BodyType<LoginRequest> },
  TContext
> => {
  const mutationKey = ['login']
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof login>>,
    { data: BodyType<LoginRequest> }
  > = (props) => {
    const { data } = props ?? {}

    return login(data, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type LoginMutationResult = NonNullable<Awaited<ReturnType<typeof login>>>
export type LoginMutationBody = BodyType<LoginRequest>
export type LoginMutationError = ErrorType<LoginResponse>

/**
 * @summary Login user
 */
export const useLogin = <TError = ErrorType<LoginResponse>, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof login>>,
      TError,
      { data: BodyType<LoginRequest> },
      TContext
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient,
): UseMutationReturnType<
  Awaited<ReturnType<typeof login>>,
  TError,
  { data: BodyType<LoginRequest> },
  TContext
> => {
  const mutationOptions = getLoginMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}
/**
 * Sends an admin invitation email to the specified address
 * @summary Send admin invitation
 */
export const inviteAdmin = (
  adminInviteRequest: MaybeRef<AdminInviteRequest>,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  adminInviteRequest = unref(adminInviteRequest)

  return customInstance<string>(
    {
      url: `http://localhost:8080/api/auth/invite/admin`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: adminInviteRequest,
      signal,
    },
    options,
  )
}

export const getInviteAdminMutationOptions = <
  TError = ErrorType<string>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof inviteAdmin>>,
    TError,
    { data: BodyType<AdminInviteRequest> },
    TContext
  >
  request?: SecondParameter<typeof customInstance>
}): UseMutationOptions<
  Awaited<ReturnType<typeof inviteAdmin>>,
  TError,
  { data: BodyType<AdminInviteRequest> },
  TContext
> => {
  const mutationKey = ['inviteAdmin']
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof inviteAdmin>>,
    { data: BodyType<AdminInviteRequest> }
  > = (props) => {
    const { data } = props ?? {}

    return inviteAdmin(data, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type InviteAdminMutationResult = NonNullable<Awaited<ReturnType<typeof inviteAdmin>>>
export type InviteAdminMutationBody = BodyType<AdminInviteRequest>
export type InviteAdminMutationError = ErrorType<string>

/**
 * @summary Send admin invitation
 */
export const useInviteAdmin = <TError = ErrorType<string>, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof inviteAdmin>>,
      TError,
      { data: BodyType<AdminInviteRequest> },
      TContext
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient,
): UseMutationReturnType<
  Awaited<ReturnType<typeof inviteAdmin>>,
  TError,
  { data: BodyType<AdminInviteRequest> },
  TContext
> => {
  const mutationOptions = getInviteAdminMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}
/**
 * Verifies the reset token and updates the user's password
 * @summary Complete password reset
 */
export const completePasswordReset = (
  completePasswordResetRequest: MaybeRef<CompletePasswordResetRequest>,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  completePasswordResetRequest = unref(completePasswordResetRequest)

  return customInstance<PasswordResetResponse>(
    {
      url: `http://localhost:8080/api/auth/complete-password-reset`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: completePasswordResetRequest,
      signal,
    },
    options,
  )
}

export const getCompletePasswordResetMutationOptions = <
  TError = ErrorType<PasswordResetResponse>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof completePasswordReset>>,
    TError,
    { data: BodyType<CompletePasswordResetRequest> },
    TContext
  >
  request?: SecondParameter<typeof customInstance>
}): UseMutationOptions<
  Awaited<ReturnType<typeof completePasswordReset>>,
  TError,
  { data: BodyType<CompletePasswordResetRequest> },
  TContext
> => {
  const mutationKey = ['completePasswordReset']
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof completePasswordReset>>,
    { data: BodyType<CompletePasswordResetRequest> }
  > = (props) => {
    const { data } = props ?? {}

    return completePasswordReset(data, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type CompletePasswordResetMutationResult = NonNullable<
  Awaited<ReturnType<typeof completePasswordReset>>
>
export type CompletePasswordResetMutationBody = BodyType<CompletePasswordResetRequest>
export type CompletePasswordResetMutationError = ErrorType<PasswordResetResponse>

/**
 * @summary Complete password reset
 */
export const useCompletePasswordReset = <
  TError = ErrorType<PasswordResetResponse>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof completePasswordReset>>,
      TError,
      { data: BodyType<CompletePasswordResetRequest> },
      TContext
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient,
): UseMutationReturnType<
  Awaited<ReturnType<typeof completePasswordReset>>,
  TError,
  { data: BodyType<CompletePasswordResetRequest> },
  TContext
> => {
  const mutationOptions = getCompletePasswordResetMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}
/**
 * Generates a password reset token and sends it to the admin user's email. Only accessible by superadmins.
 * @summary Request password reset for admin user
 */
export const requestAdminPasswordReset = (
  requestPasswordResetRequest: MaybeRef<RequestPasswordResetRequest>,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  requestPasswordResetRequest = unref(requestPasswordResetRequest)

  return customInstance<PasswordResetResponse>(
    {
      url: `http://localhost:8080/api/auth/admin/reset-password-link`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: requestPasswordResetRequest,
      signal,
    },
    options,
  )
}

export const getRequestAdminPasswordResetMutationOptions = <
  TError = ErrorType<PasswordResetResponse>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof requestAdminPasswordReset>>,
    TError,
    { data: BodyType<RequestPasswordResetRequest> },
    TContext
  >
  request?: SecondParameter<typeof customInstance>
}): UseMutationOptions<
  Awaited<ReturnType<typeof requestAdminPasswordReset>>,
  TError,
  { data: BodyType<RequestPasswordResetRequest> },
  TContext
> => {
  const mutationKey = ['requestAdminPasswordReset']
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof requestAdminPasswordReset>>,
    { data: BodyType<RequestPasswordResetRequest> }
  > = (props) => {
    const { data } = props ?? {}

    return requestAdminPasswordReset(data, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type RequestAdminPasswordResetMutationResult = NonNullable<
  Awaited<ReturnType<typeof requestAdminPasswordReset>>
>
export type RequestAdminPasswordResetMutationBody = BodyType<RequestPasswordResetRequest>
export type RequestAdminPasswordResetMutationError = ErrorType<PasswordResetResponse>

/**
 * @summary Request password reset for admin user
 */
export const useRequestAdminPasswordReset = <
  TError = ErrorType<PasswordResetResponse>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof requestAdminPasswordReset>>,
      TError,
      { data: BodyType<RequestPasswordResetRequest> },
      TContext
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient,
): UseMutationReturnType<
  Awaited<ReturnType<typeof requestAdminPasswordReset>>,
  TError,
  { data: BodyType<RequestPasswordResetRequest> },
  TContext
> => {
  const mutationOptions = getRequestAdminPasswordResetMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}
export const verifyAdminInviteToken = (
  params: MaybeRef<VerifyAdminInviteTokenParams>,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  params = unref(params)

  return customInstance<VerifyAdminInviteToken200>(
    {
      url: `http://localhost:8080/api/auth/verify-admin-invite`,
      method: 'GET',
      params: unref(params),
      signal,
    },
    options,
  )
}

export const getVerifyAdminInviteTokenQueryKey = (
  params: MaybeRef<VerifyAdminInviteTokenParams>,
) => {
  return [
    'http:',
    'localhost:8080',
    'api',
    'auth',
    'verify-admin-invite',
    ...(params ? [params] : []),
  ] as const
}

export const getVerifyAdminInviteTokenQueryOptions = <
  TData = Awaited<ReturnType<typeof verifyAdminInviteToken>>,
  TError = ErrorType<unknown>,
>(
  params: MaybeRef<VerifyAdminInviteTokenParams>,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof verifyAdminInviteToken>>, TError, TData>
    >
    request?: SecondParameter<typeof customInstance>
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = getVerifyAdminInviteTokenQueryKey(params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof verifyAdminInviteToken>>> = ({ signal }) =>
    verifyAdminInviteToken(params, requestOptions, signal)

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof verifyAdminInviteToken>>,
    TError,
    TData
  >
}

export type VerifyAdminInviteTokenQueryResult = NonNullable<
  Awaited<ReturnType<typeof verifyAdminInviteToken>>
>
export type VerifyAdminInviteTokenQueryError = ErrorType<unknown>

export function useVerifyAdminInviteToken<
  TData = Awaited<ReturnType<typeof verifyAdminInviteToken>>,
  TError = ErrorType<unknown>,
>(
  params: MaybeRef<VerifyAdminInviteTokenParams>,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof verifyAdminInviteToken>>, TError, TData>
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient,
): UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getVerifyAdminInviteTokenQueryOptions(params, options)

  const query = useQuery(queryOptions, queryClient) as UseQueryReturnType<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>
  }

  query.queryKey = unref(queryOptions).queryKey as DataTag<QueryKey, TData, TError>

  return query
}

/**
 * Retrieves the currently authenticated user's details
 * @summary Get current user
 */
export const me = (options?: SecondParameter<typeof customInstance>, signal?: AbortSignal) => {
  return customInstance<UserResponse>(
    { url: `http://localhost:8080/api/auth/me`, method: 'GET', signal },
    options,
  )
}

export const getMeQueryKey = () => {
  return ['http:', 'localhost:8080', 'api', 'auth', 'me'] as const
}

export const getMeQueryOptions = <
  TData = Awaited<ReturnType<typeof me>>,
  TError = ErrorType<UserResponse>,
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof me>>, TError, TData>>
  request?: SecondParameter<typeof customInstance>
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = getMeQueryKey()

  const queryFn: QueryFunction<Awaited<ReturnType<typeof me>>> = ({ signal }) =>
    me(requestOptions, signal)

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof me>>,
    TError,
    TData
  >
}

export type MeQueryResult = NonNullable<Awaited<ReturnType<typeof me>>>
export type MeQueryError = ErrorType<UserResponse>

/**
 * @summary Get current user
 */

export function useMe<TData = Awaited<ReturnType<typeof me>>, TError = ErrorType<UserResponse>>(
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof me>>, TError, TData>>
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient,
): UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getMeQueryOptions(options)

  const query = useQuery(queryOptions, queryClient) as UseQueryReturnType<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>
  }

  query.queryKey = unref(queryOptions).queryKey as DataTag<QueryKey, TData, TError>

  return query
}
