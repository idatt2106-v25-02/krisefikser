/**
 * Generated by orval v7.8.0 üç∫
 * Do not edit manually.
 * Krisefikser API
 * API for the Krisefikser application
 * OpenAPI spec version: 1.0
 */
import { useMutation, useQuery } from '@tanstack/vue-query'
import type {
  DataTag,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationReturnType,
  UseQueryOptions,
  UseQueryReturnType,
} from '@tanstack/vue-query'

import { unref } from 'vue'
import type { MaybeRef } from 'vue'

import type {
  LoginRequest,
  LoginResponse,
  RefreshRequest,
  RefreshResponse,
  RegisterRequest,
  RegisterResponse,
  UserDto,
} from '.././model'

import { customInstance } from '../../axios'
import type { ErrorType, BodyType } from '../../axios'

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1]

/**
 * Creates a new user account in the system
 * @summary Register a new user
 */
export const register = (
  registerRequest: MaybeRef<RegisterRequest>,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  registerRequest = unref(registerRequest)

  return customInstance<RegisterResponse>(
    {
      url: `http://localhost:8080/api/auth/register`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: registerRequest,
      signal,
    },
    options,
  )
}

export const getRegisterMutationOptions = <
  TError = ErrorType<RegisterResponse>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof register>>,
    TError,
    { data: BodyType<RegisterRequest> },
    TContext
  >
  request?: SecondParameter<typeof customInstance>
}): UseMutationOptions<
  Awaited<ReturnType<typeof register>>,
  TError,
  { data: BodyType<RegisterRequest> },
  TContext
> => {
  const mutationKey = ['register']
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof register>>,
    { data: BodyType<RegisterRequest> }
  > = (props) => {
    const { data } = props ?? {}

    return register(data, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type RegisterMutationResult = NonNullable<Awaited<ReturnType<typeof register>>>
export type RegisterMutationBody = BodyType<RegisterRequest>
export type RegisterMutationError = ErrorType<RegisterResponse>

/**
 * @summary Register a new user
 */
export const useRegister = <TError = ErrorType<RegisterResponse>, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof register>>,
      TError,
      { data: BodyType<RegisterRequest> },
      TContext
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient,
): UseMutationReturnType<
  Awaited<ReturnType<typeof register>>,
  TError,
  { data: BodyType<RegisterRequest> },
  TContext
> => {
  const mutationOptions = getRegisterMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}
/**
 * Generates new access token using refresh token
 * @summary Refresh token
 */
export const refresh = (
  refreshRequest: MaybeRef<RefreshRequest>,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  refreshRequest = unref(refreshRequest)

  return customInstance<RefreshResponse>(
    {
      url: `http://localhost:8080/api/auth/refresh`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: refreshRequest,
      signal,
    },
    options,
  )
}

export const getRefreshMutationOptions = <
  TError = ErrorType<RefreshResponse>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof refresh>>,
    TError,
    { data: BodyType<RefreshRequest> },
    TContext
  >
  request?: SecondParameter<typeof customInstance>
}): UseMutationOptions<
  Awaited<ReturnType<typeof refresh>>,
  TError,
  { data: BodyType<RefreshRequest> },
  TContext
> => {
  const mutationKey = ['refresh']
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof refresh>>,
    { data: BodyType<RefreshRequest> }
  > = (props) => {
    const { data } = props ?? {}

    return refresh(data, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type RefreshMutationResult = NonNullable<Awaited<ReturnType<typeof refresh>>>
export type RefreshMutationBody = BodyType<RefreshRequest>
export type RefreshMutationError = ErrorType<RefreshResponse>

/**
 * @summary Refresh token
 */
export const useRefresh = <TError = ErrorType<RefreshResponse>, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof refresh>>,
      TError,
      { data: BodyType<RefreshRequest> },
      TContext
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient,
): UseMutationReturnType<
  Awaited<ReturnType<typeof refresh>>,
  TError,
  { data: BodyType<RefreshRequest> },
  TContext
> => {
  const mutationOptions = getRefreshMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}
/**
 * Authenticates a user and returns access tokens
 * @summary Login user
 */
export const login = (
  loginRequest: MaybeRef<LoginRequest>,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  loginRequest = unref(loginRequest)

  return customInstance<LoginResponse>(
    {
      url: `http://localhost:8080/api/auth/login`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: loginRequest,
      signal,
    },
    options,
  )
}

export const getLoginMutationOptions = <
  TError = ErrorType<LoginResponse>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof login>>,
    TError,
    { data: BodyType<LoginRequest> },
    TContext
  >
  request?: SecondParameter<typeof customInstance>
}): UseMutationOptions<
  Awaited<ReturnType<typeof login>>,
  TError,
  { data: BodyType<LoginRequest> },
  TContext
> => {
  const mutationKey = ['login']
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof login>>,
    { data: BodyType<LoginRequest> }
  > = (props) => {
    const { data } = props ?? {}

    return login(data, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type LoginMutationResult = NonNullable<Awaited<ReturnType<typeof login>>>
export type LoginMutationBody = BodyType<LoginRequest>
export type LoginMutationError = ErrorType<LoginResponse>

/**
 * @summary Login user
 */
export const useLogin = <TError = ErrorType<LoginResponse>, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof login>>,
      TError,
      { data: BodyType<LoginRequest> },
      TContext
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient,
): UseMutationReturnType<
  Awaited<ReturnType<typeof login>>,
  TError,
  { data: BodyType<LoginRequest> },
  TContext
> => {
  const mutationOptions = getLoginMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}
/**
 * Retrieves the currently authenticated user's details
 * @summary Get current user
 */
export const me = (options?: SecondParameter<typeof customInstance>, signal?: AbortSignal) => {
  return customInstance<UserDto>(
    { url: `http://localhost:8080/api/auth/me`, method: 'GET', signal },
    options,
  )
}

export const getMeQueryKey = () => {
  return ['http:', 'localhost:8080', 'api', 'auth', 'me'] as const
}

export const getMeQueryOptions = <
  TData = Awaited<ReturnType<typeof me>>,
  TError = ErrorType<UserDto>,
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof me>>, TError, TData>>
  request?: SecondParameter<typeof customInstance>
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = getMeQueryKey()

  const queryFn: QueryFunction<Awaited<ReturnType<typeof me>>> = ({ signal }) =>
    me(requestOptions, signal)

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof me>>,
    TError,
    TData
  >
}

export type MeQueryResult = NonNullable<Awaited<ReturnType<typeof me>>>
export type MeQueryError = ErrorType<UserDto>

/**
 * @summary Get current user
 */

export function useMe<TData = Awaited<ReturnType<typeof me>>, TError = ErrorType<UserDto>>(
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof me>>, TError, TData>>
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient,
): UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getMeQueryOptions(options)

  const query = useQuery(queryOptions, queryClient) as UseQueryReturnType<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>
  }

  query.queryKey = unref(queryOptions).queryKey as DataTag<QueryKey, TData, TError>

  return query
}
