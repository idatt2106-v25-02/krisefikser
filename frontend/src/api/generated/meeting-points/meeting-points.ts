/**
 * Generated by orval v7.9.0 üç∫
 * Do not edit manually.
 * Krisefikser API
 * API for the Krisefikser application
 * OpenAPI spec version: 1.0
 */
import { useMutation, useQuery } from '@tanstack/vue-query'
import type {
  DataTag,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationReturnType,
  UseQueryOptions,
  UseQueryReturnType,
} from '@tanstack/vue-query'

import { computed, unref } from 'vue'
import type { MaybeRef } from 'vue'

import type { MeetingPointRequest, MeetingPointResponse } from '.././model'

import { customInstance } from '../../axios'
import type { ErrorType, BodyType } from '../../axios'

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1]

/**
 * Updates an existing meeting point
 * @summary Update meeting point
 */
export const updateMeetingPoint = (
  householdId: MaybeRef<string>,
  id: MaybeRef<string>,
  meetingPointRequest: MaybeRef<MeetingPointRequest>,
  options?: SecondParameter<typeof customInstance>,
) => {
  householdId = unref(householdId)
  id = unref(id)
  meetingPointRequest = unref(meetingPointRequest)

  return customInstance<MeetingPointResponse>(
    {
      url: `http://localhost:8080/api/households/${householdId}/meeting-points/${id}`,
      method: 'PUT',
      headers: { 'Content-Type': 'application/json' },
      data: meetingPointRequest,
    },
    options,
  )
}

export const getUpdateMeetingPointMutationOptions = <
  TError = ErrorType<MeetingPointResponse>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateMeetingPoint>>,
    TError,
    { householdId: string; id: string; data: BodyType<MeetingPointRequest> },
    TContext
  >
  request?: SecondParameter<typeof customInstance>
}): UseMutationOptions<
  Awaited<ReturnType<typeof updateMeetingPoint>>,
  TError,
  { householdId: string; id: string; data: BodyType<MeetingPointRequest> },
  TContext
> => {
  const mutationKey = ['updateMeetingPoint']
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof updateMeetingPoint>>,
    { householdId: string; id: string; data: BodyType<MeetingPointRequest> }
  > = (props) => {
    const { householdId, id, data } = props ?? {}

    return updateMeetingPoint(householdId, id, data, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type UpdateMeetingPointMutationResult = NonNullable<
  Awaited<ReturnType<typeof updateMeetingPoint>>
>
export type UpdateMeetingPointMutationBody = BodyType<MeetingPointRequest>
export type UpdateMeetingPointMutationError = ErrorType<MeetingPointResponse>

/**
 * @summary Update meeting point
 */
export const useUpdateMeetingPoint = <TError = ErrorType<MeetingPointResponse>, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof updateMeetingPoint>>,
      TError,
      { householdId: string; id: string; data: BodyType<MeetingPointRequest> },
      TContext
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient,
): UseMutationReturnType<
  Awaited<ReturnType<typeof updateMeetingPoint>>,
  TError,
  { householdId: string; id: string; data: BodyType<MeetingPointRequest> },
  TContext
> => {
  const mutationOptions = getUpdateMeetingPointMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}
/**
 * Deletes a meeting point
 * @summary Delete meeting point
 */
export const deleteMeetingPoint = (
  householdId: MaybeRef<string>,
  id: MaybeRef<string>,
  options?: SecondParameter<typeof customInstance>,
) => {
  householdId = unref(householdId)
  id = unref(id)

  return customInstance<void>(
    {
      url: `http://localhost:8080/api/households/${householdId}/meeting-points/${id}`,
      method: 'DELETE',
    },
    options,
  )
}

export const getDeleteMeetingPointMutationOptions = <
  TError = ErrorType<void>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteMeetingPoint>>,
    TError,
    { householdId: string; id: string },
    TContext
  >
  request?: SecondParameter<typeof customInstance>
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteMeetingPoint>>,
  TError,
  { householdId: string; id: string },
  TContext
> => {
  const mutationKey = ['deleteMeetingPoint']
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteMeetingPoint>>,
    { householdId: string; id: string }
  > = (props) => {
    const { householdId, id } = props ?? {}

    return deleteMeetingPoint(householdId, id, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type DeleteMeetingPointMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteMeetingPoint>>
>

export type DeleteMeetingPointMutationError = ErrorType<void>

/**
 * @summary Delete meeting point
 */
export const useDeleteMeetingPoint = <TError = ErrorType<void>, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof deleteMeetingPoint>>,
      TError,
      { householdId: string; id: string },
      TContext
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient,
): UseMutationReturnType<
  Awaited<ReturnType<typeof deleteMeetingPoint>>,
  TError,
  { householdId: string; id: string },
  TContext
> => {
  const mutationOptions = getDeleteMeetingPointMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}
/**
 * Retrieves all meeting points for the household
 * @summary Get all meeting points
 */
export const getMeetingPoints = (
  householdId: MaybeRef<string>,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  householdId = unref(householdId)

  return customInstance<MeetingPointResponse[]>(
    {
      url: `http://localhost:8080/api/households/${householdId}/meeting-points`,
      method: 'GET',
      signal,
    },
    options,
  )
}

export const getGetMeetingPointsQueryKey = (householdId: MaybeRef<string>) => {
  return ['http:', 'localhost:8080', 'api', 'households', householdId, 'meeting-points'] as const
}

export const getGetMeetingPointsQueryOptions = <
  TData = Awaited<ReturnType<typeof getMeetingPoints>>,
  TError = ErrorType<unknown>,
>(
  householdId: MaybeRef<string>,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeetingPoints>>, TError, TData>>
    request?: SecondParameter<typeof customInstance>
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = getGetMeetingPointsQueryKey(householdId)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getMeetingPoints>>> = ({ signal }) =>
    getMeetingPoints(householdId, requestOptions, signal)

  return {
    queryKey,
    queryFn,
    enabled: computed(() => !!unref(householdId)),
    ...queryOptions,
  } as UseQueryOptions<Awaited<ReturnType<typeof getMeetingPoints>>, TError, TData>
}

export type GetMeetingPointsQueryResult = NonNullable<Awaited<ReturnType<typeof getMeetingPoints>>>
export type GetMeetingPointsQueryError = ErrorType<unknown>

/**
 * @summary Get all meeting points
 */

export function useGetMeetingPoints<
  TData = Awaited<ReturnType<typeof getMeetingPoints>>,
  TError = ErrorType<unknown>,
>(
  householdId: MaybeRef<string>,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeetingPoints>>, TError, TData>>
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient,
): UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getGetMeetingPointsQueryOptions(householdId, options)

  const query = useQuery(queryOptions, queryClient) as UseQueryReturnType<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>
  }

  query.queryKey = unref(queryOptions).queryKey as DataTag<QueryKey, TData, TError>

  return query
}

/**
 * Creates a new meeting point for the household
 * @summary Create meeting point
 */
export const createMeetingPoint = (
  householdId: MaybeRef<string>,
  meetingPointRequest: MaybeRef<MeetingPointRequest>,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  householdId = unref(householdId)
  meetingPointRequest = unref(meetingPointRequest)

  return customInstance<MeetingPointResponse>(
    {
      url: `http://localhost:8080/api/households/${householdId}/meeting-points`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: meetingPointRequest,
      signal,
    },
    options,
  )
}

export const getCreateMeetingPointMutationOptions = <
  TError = ErrorType<MeetingPointResponse>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createMeetingPoint>>,
    TError,
    { householdId: string; data: BodyType<MeetingPointRequest> },
    TContext
  >
  request?: SecondParameter<typeof customInstance>
}): UseMutationOptions<
  Awaited<ReturnType<typeof createMeetingPoint>>,
  TError,
  { householdId: string; data: BodyType<MeetingPointRequest> },
  TContext
> => {
  const mutationKey = ['createMeetingPoint']
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof createMeetingPoint>>,
    { householdId: string; data: BodyType<MeetingPointRequest> }
  > = (props) => {
    const { householdId, data } = props ?? {}

    return createMeetingPoint(householdId, data, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type CreateMeetingPointMutationResult = NonNullable<
  Awaited<ReturnType<typeof createMeetingPoint>>
>
export type CreateMeetingPointMutationBody = BodyType<MeetingPointRequest>
export type CreateMeetingPointMutationError = ErrorType<MeetingPointResponse>

/**
 * @summary Create meeting point
 */
export const useCreateMeetingPoint = <TError = ErrorType<MeetingPointResponse>, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof createMeetingPoint>>,
      TError,
      { householdId: string; data: BodyType<MeetingPointRequest> },
      TContext
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient,
): UseMutationReturnType<
  Awaited<ReturnType<typeof createMeetingPoint>>,
  TError,
  { householdId: string; data: BodyType<MeetingPointRequest> },
  TContext
> => {
  const mutationOptions = getCreateMeetingPointMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}
