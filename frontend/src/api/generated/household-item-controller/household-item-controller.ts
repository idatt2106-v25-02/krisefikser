/**
 * Generated by orval v7.9.0 üç∫
 * Do not edit manually.
 * Krisefikser API
 * API for the Krisefikser application
 * OpenAPI spec version: 1.0
 */
import { useMutation, useQuery } from '@tanstack/vue-query'
import type {
  DataTag,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationReturnType,
  UseQueryOptions,
  UseQueryReturnType,
} from '@tanstack/vue-query'

import { computed, unref } from 'vue'
import type { MaybeRef } from 'vue'

import type {
  GetExpiringItemsParams,
  GetHouseholdItemsParams,
  GetHouseholdSummary200,
  HouseholdItemResponse,
  PageHouseholdItemResponse,
} from '.././model'

import { customInstance } from '../../axios'
import type { ErrorType, BodyType } from '../../axios'

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1]

export const updateHouseholdItem = (
  householdId: MaybeRef<string>,
  itemId: MaybeRef<string>,
  householdItemResponse: MaybeRef<HouseholdItemResponse>,
  options?: SecondParameter<typeof customInstance>,
) => {
  householdId = unref(householdId)
  itemId = unref(itemId)
  householdItemResponse = unref(householdItemResponse)

  return customInstance<HouseholdItemResponse>(
    {
      url: `http://localhost:8080/api/households/${householdId}/items/${itemId}`,
      method: 'PUT',
      headers: { 'Content-Type': 'application/json' },
      data: householdItemResponse,
    },
    options,
  )
}

export const getUpdateHouseholdItemMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateHouseholdItem>>,
    TError,
    { householdId: string; itemId: string; data: BodyType<HouseholdItemResponse> },
    TContext
  >
  request?: SecondParameter<typeof customInstance>
}): UseMutationOptions<
  Awaited<ReturnType<typeof updateHouseholdItem>>,
  TError,
  { householdId: string; itemId: string; data: BodyType<HouseholdItemResponse> },
  TContext
> => {
  const mutationKey = ['updateHouseholdItem']
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof updateHouseholdItem>>,
    { householdId: string; itemId: string; data: BodyType<HouseholdItemResponse> }
  > = (props) => {
    const { householdId, itemId, data } = props ?? {}

    return updateHouseholdItem(householdId, itemId, data, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type UpdateHouseholdItemMutationResult = NonNullable<
  Awaited<ReturnType<typeof updateHouseholdItem>>
>
export type UpdateHouseholdItemMutationBody = BodyType<HouseholdItemResponse>
export type UpdateHouseholdItemMutationError = ErrorType<unknown>

export const useUpdateHouseholdItem = <TError = ErrorType<unknown>, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof updateHouseholdItem>>,
      TError,
      { householdId: string; itemId: string; data: BodyType<HouseholdItemResponse> },
      TContext
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient,
): UseMutationReturnType<
  Awaited<ReturnType<typeof updateHouseholdItem>>,
  TError,
  { householdId: string; itemId: string; data: BodyType<HouseholdItemResponse> },
  TContext
> => {
  const mutationOptions = getUpdateHouseholdItemMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}
export const deleteHouseholdItem = (
  householdId: MaybeRef<string>,
  itemId: MaybeRef<string>,
  options?: SecondParameter<typeof customInstance>,
) => {
  householdId = unref(householdId)
  itemId = unref(itemId)

  return customInstance<void>(
    {
      url: `http://localhost:8080/api/households/${householdId}/items/${itemId}`,
      method: 'DELETE',
    },
    options,
  )
}

export const getDeleteHouseholdItemMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteHouseholdItem>>,
    TError,
    { householdId: string; itemId: string },
    TContext
  >
  request?: SecondParameter<typeof customInstance>
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteHouseholdItem>>,
  TError,
  { householdId: string; itemId: string },
  TContext
> => {
  const mutationKey = ['deleteHouseholdItem']
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteHouseholdItem>>,
    { householdId: string; itemId: string }
  > = (props) => {
    const { householdId, itemId } = props ?? {}

    return deleteHouseholdItem(householdId, itemId, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type DeleteHouseholdItemMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteHouseholdItem>>
>

export type DeleteHouseholdItemMutationError = ErrorType<unknown>

export const useDeleteHouseholdItem = <TError = ErrorType<unknown>, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof deleteHouseholdItem>>,
      TError,
      { householdId: string; itemId: string },
      TContext
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient,
): UseMutationReturnType<
  Awaited<ReturnType<typeof deleteHouseholdItem>>,
  TError,
  { householdId: string; itemId: string },
  TContext
> => {
  const mutationOptions = getDeleteHouseholdItemMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}
export const getHouseholdItems = (
  householdId: MaybeRef<string>,
  params: MaybeRef<GetHouseholdItemsParams>,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  householdId = unref(householdId)
  params = unref(params)

  return customInstance<PageHouseholdItemResponse>(
    {
      url: `http://localhost:8080/api/households/${householdId}/items`,
      method: 'GET',
      params: unref(params),
      signal,
    },
    options,
  )
}

export const getGetHouseholdItemsQueryKey = (
  householdId: MaybeRef<string>,
  params: MaybeRef<GetHouseholdItemsParams>,
) => {
  return [
    'http:',
    'localhost:8080',
    'api',
    'households',
    householdId,
    'items',
    ...(params ? [params] : []),
  ] as const
}

export const getGetHouseholdItemsQueryOptions = <
  TData = Awaited<ReturnType<typeof getHouseholdItems>>,
  TError = ErrorType<unknown>,
>(
  householdId: MaybeRef<string>,
  params: MaybeRef<GetHouseholdItemsParams>,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getHouseholdItems>>, TError, TData>>
    request?: SecondParameter<typeof customInstance>
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = getGetHouseholdItemsQueryKey(householdId, params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getHouseholdItems>>> = ({ signal }) =>
    getHouseholdItems(householdId, params, requestOptions, signal)

  return {
    queryKey,
    queryFn,
    enabled: computed(() => !!unref(householdId)),
    ...queryOptions,
  } as UseQueryOptions<Awaited<ReturnType<typeof getHouseholdItems>>, TError, TData>
}

export type GetHouseholdItemsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getHouseholdItems>>
>
export type GetHouseholdItemsQueryError = ErrorType<unknown>

export function useGetHouseholdItems<
  TData = Awaited<ReturnType<typeof getHouseholdItems>>,
  TError = ErrorType<unknown>,
>(
  householdId: MaybeRef<string>,
  params: MaybeRef<GetHouseholdItemsParams>,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getHouseholdItems>>, TError, TData>>
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient,
): UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getGetHouseholdItemsQueryOptions(householdId, params, options)

  const query = useQuery(queryOptions, queryClient) as UseQueryReturnType<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>
  }

  query.queryKey = unref(queryOptions).queryKey as DataTag<QueryKey, TData, TError>

  return query
}

export const createHouseholdItem = (
  householdId: MaybeRef<string>,
  householdItemResponse: MaybeRef<HouseholdItemResponse>,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  householdId = unref(householdId)
  householdItemResponse = unref(householdItemResponse)

  return customInstance<HouseholdItemResponse>(
    {
      url: `http://localhost:8080/api/households/${householdId}/items`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: householdItemResponse,
      signal,
    },
    options,
  )
}

export const getCreateHouseholdItemMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createHouseholdItem>>,
    TError,
    { householdId: string; data: BodyType<HouseholdItemResponse> },
    TContext
  >
  request?: SecondParameter<typeof customInstance>
}): UseMutationOptions<
  Awaited<ReturnType<typeof createHouseholdItem>>,
  TError,
  { householdId: string; data: BodyType<HouseholdItemResponse> },
  TContext
> => {
  const mutationKey = ['createHouseholdItem']
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof createHouseholdItem>>,
    { householdId: string; data: BodyType<HouseholdItemResponse> }
  > = (props) => {
    const { householdId, data } = props ?? {}

    return createHouseholdItem(householdId, data, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type CreateHouseholdItemMutationResult = NonNullable<
  Awaited<ReturnType<typeof createHouseholdItem>>
>
export type CreateHouseholdItemMutationBody = BodyType<HouseholdItemResponse>
export type CreateHouseholdItemMutationError = ErrorType<unknown>

export const useCreateHouseholdItem = <TError = ErrorType<unknown>, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof createHouseholdItem>>,
      TError,
      { householdId: string; data: BodyType<HouseholdItemResponse> },
      TContext
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient,
): UseMutationReturnType<
  Awaited<ReturnType<typeof createHouseholdItem>>,
  TError,
  { householdId: string; data: BodyType<HouseholdItemResponse> },
  TContext
> => {
  const mutationOptions = getCreateHouseholdItemMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}
export const getHouseholdSummary = (
  householdId: MaybeRef<string>,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  householdId = unref(householdId)

  return customInstance<GetHouseholdSummary200>(
    {
      url: `http://localhost:8080/api/households/${householdId}/items/summary`,
      method: 'GET',
      signal,
    },
    options,
  )
}

export const getGetHouseholdSummaryQueryKey = (householdId: MaybeRef<string>) => {
  return ['http:', 'localhost:8080', 'api', 'households', householdId, 'items', 'summary'] as const
}

export const getGetHouseholdSummaryQueryOptions = <
  TData = Awaited<ReturnType<typeof getHouseholdSummary>>,
  TError = ErrorType<unknown>,
>(
  householdId: MaybeRef<string>,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getHouseholdSummary>>, TError, TData>>
    request?: SecondParameter<typeof customInstance>
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = getGetHouseholdSummaryQueryKey(householdId)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getHouseholdSummary>>> = ({ signal }) =>
    getHouseholdSummary(householdId, requestOptions, signal)

  return {
    queryKey,
    queryFn,
    enabled: computed(() => !!unref(householdId)),
    ...queryOptions,
  } as UseQueryOptions<Awaited<ReturnType<typeof getHouseholdSummary>>, TError, TData>
}

export type GetHouseholdSummaryQueryResult = NonNullable<
  Awaited<ReturnType<typeof getHouseholdSummary>>
>
export type GetHouseholdSummaryQueryError = ErrorType<unknown>

export function useGetHouseholdSummary<
  TData = Awaited<ReturnType<typeof getHouseholdSummary>>,
  TError = ErrorType<unknown>,
>(
  householdId: MaybeRef<string>,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getHouseholdSummary>>, TError, TData>>
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient,
): UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getGetHouseholdSummaryQueryOptions(householdId, options)

  const query = useQuery(queryOptions, queryClient) as UseQueryReturnType<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>
  }

  query.queryKey = unref(queryOptions).queryKey as DataTag<QueryKey, TData, TError>

  return query
}

export const getExpiringItems = (
  householdId: MaybeRef<string>,
  params: MaybeRef<GetExpiringItemsParams>,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  householdId = unref(householdId)
  params = unref(params)

  return customInstance<HouseholdItemResponse[]>(
    {
      url: `http://localhost:8080/api/households/${householdId}/items/expiring-soon`,
      method: 'GET',
      params: unref(params),
      signal,
    },
    options,
  )
}

export const getGetExpiringItemsQueryKey = (
  householdId: MaybeRef<string>,
  params: MaybeRef<GetExpiringItemsParams>,
) => {
  return [
    'http:',
    'localhost:8080',
    'api',
    'households',
    householdId,
    'items',
    'expiring-soon',
    ...(params ? [params] : []),
  ] as const
}

export const getGetExpiringItemsQueryOptions = <
  TData = Awaited<ReturnType<typeof getExpiringItems>>,
  TError = ErrorType<unknown>,
>(
  householdId: MaybeRef<string>,
  params: MaybeRef<GetExpiringItemsParams>,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getExpiringItems>>, TError, TData>>
    request?: SecondParameter<typeof customInstance>
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = getGetExpiringItemsQueryKey(householdId, params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getExpiringItems>>> = ({ signal }) =>
    getExpiringItems(householdId, params, requestOptions, signal)

  return {
    queryKey,
    queryFn,
    enabled: computed(() => !!unref(householdId)),
    ...queryOptions,
  } as UseQueryOptions<Awaited<ReturnType<typeof getExpiringItems>>, TError, TData>
}

export type GetExpiringItemsQueryResult = NonNullable<Awaited<ReturnType<typeof getExpiringItems>>>
export type GetExpiringItemsQueryError = ErrorType<unknown>

export function useGetExpiringItems<
  TData = Awaited<ReturnType<typeof getExpiringItems>>,
  TError = ErrorType<unknown>,
>(
  householdId: MaybeRef<string>,
  params: MaybeRef<GetExpiringItemsParams>,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getExpiringItems>>, TError, TData>>
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient,
): UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getGetExpiringItemsQueryOptions(householdId, params, options)

  const query = useQuery(queryOptions, queryClient) as UseQueryReturnType<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>
  }

  query.queryKey = unref(queryOptions).queryKey as DataTag<QueryKey, TData, TError>

  return query
}
