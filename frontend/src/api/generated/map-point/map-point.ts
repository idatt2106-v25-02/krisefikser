/**
 * Generated by orval v7.8.0 üç∫
 * Do not edit manually.
 * Krisefikser API
 * This API exposes endpoints for the Krisefikser application.
 * OpenAPI spec version: 1.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/vue-query';
import type {
  DataTag,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationReturnType,
  UseQueryOptions,
  UseQueryReturnType
} from '@tanstack/vue-query';

import {
  computed,
  unref
} from 'vue';
import type {
  MaybeRef
} from 'vue';

import type {
  MapPoint
} from '.././model';

import { customInstance } from '../../axios';
import type { ErrorType , BodyType } from '../../axios';


type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];



/**
 * Retrieves a specific map point by its ID
 * @summary Get a map point by ID
 */
export const getMapPointById = (
    id: MaybeRef<number>,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      id = unref(id);
      
      return customInstance<MapPoint>(
      {url: `http://localhost:8080/api/map-points/${id}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetMapPointByIdQueryKey = (id: MaybeRef<number>,) => {
    return ['http:','localhost:8080','api','map-points',id] as const;
    }

    
export const getGetMapPointByIdQueryOptions = <TData = Awaited<ReturnType<typeof getMapPointById>>, TError = ErrorType<void>>(id: MaybeRef<number>, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMapPointById>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  getGetMapPointByIdQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMapPointById>>> = ({ signal }) => getMapPointById(id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: computed(() => !!(unref(id))), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMapPointById>>, TError, TData> 
}

export type GetMapPointByIdQueryResult = NonNullable<Awaited<ReturnType<typeof getMapPointById>>>
export type GetMapPointByIdQueryError = ErrorType<void>


/**
 * @summary Get a map point by ID
 */

export function useGetMapPointById<TData = Awaited<ReturnType<typeof getMapPointById>>, TError = ErrorType<void>>(
 id: MaybeRef<number>, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMapPointById>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient 
 ): UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetMapPointByIdQueryOptions(id,options)

  const query = useQuery(queryOptions , queryClient) as UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = unref(queryOptions).queryKey as DataTag<QueryKey, TData, TError>;

  return query;
}



/**
 * Updates an existing map point by its ID
 * @summary Update a map point
 */
export const updateMapPoint = (
    id: MaybeRef<number>,
    mapPoint: MaybeRef<MapPoint>,
 options?: SecondParameter<typeof customInstance>,) => {
      id = unref(id);
mapPoint = unref(mapPoint);
      
      return customInstance<MapPoint>(
      {url: `http://localhost:8080/api/map-points/${id}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: mapPoint
    },
      options);
    }
  


export const getUpdateMapPointMutationOptions = <TError = ErrorType<void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateMapPoint>>, TError,{id: number;data: BodyType<MapPoint>}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof updateMapPoint>>, TError,{id: number;data: BodyType<MapPoint>}, TContext> => {
    
const mutationKey = ['updateMapPoint'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updateMapPoint>>, {id: number;data: BodyType<MapPoint>}> = (props) => {
          const {id,data} = props ?? {};

          return  updateMapPoint(id,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UpdateMapPointMutationResult = NonNullable<Awaited<ReturnType<typeof updateMapPoint>>>
    export type UpdateMapPointMutationBody = BodyType<MapPoint>
    export type UpdateMapPointMutationError = ErrorType<void>

    /**
 * @summary Update a map point
 */
export const useUpdateMapPoint = <TError = ErrorType<void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateMapPoint>>, TError,{id: number;data: BodyType<MapPoint>}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationReturnType<
        Awaited<ReturnType<typeof updateMapPoint>>,
        TError,
        {id: number;data: BodyType<MapPoint>},
        TContext
      > => {

      const mutationOptions = getUpdateMapPointMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * Deletes a map point from the system
 * @summary Delete a map point
 */
export const deleteMapPoint = (
    id: MaybeRef<number>,
 options?: SecondParameter<typeof customInstance>,) => {
      id = unref(id);
      
      return customInstance<void>(
      {url: `http://localhost:8080/api/map-points/${id}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteMapPointMutationOptions = <TError = ErrorType<void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteMapPoint>>, TError,{id: number}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteMapPoint>>, TError,{id: number}, TContext> => {
    
const mutationKey = ['deleteMapPoint'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteMapPoint>>, {id: number}> = (props) => {
          const {id} = props ?? {};

          return  deleteMapPoint(id,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteMapPointMutationResult = NonNullable<Awaited<ReturnType<typeof deleteMapPoint>>>
    
    export type DeleteMapPointMutationError = ErrorType<void>

    /**
 * @summary Delete a map point
 */
export const useDeleteMapPoint = <TError = ErrorType<void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteMapPoint>>, TError,{id: number}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationReturnType<
        Awaited<ReturnType<typeof deleteMapPoint>>,
        TError,
        {id: number},
        TContext
      > => {

      const mutationOptions = getDeleteMapPointMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * Retrieves a list of all map points in the system
 * @summary Get all map points
 */
export const getAllMapPoints = (
    
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<MapPoint>(
      {url: `http://localhost:8080/api/map-points`, method: 'GET', signal
    },
      options);
    }
  

export const getGetAllMapPointsQueryKey = () => {
    return ['http:','localhost:8080','api','map-points'] as const;
    }

    
export const getGetAllMapPointsQueryOptions = <TData = Awaited<ReturnType<typeof getAllMapPoints>>, TError = ErrorType<void>>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllMapPoints>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  getGetAllMapPointsQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAllMapPoints>>> = ({ signal }) => getAllMapPoints(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getAllMapPoints>>, TError, TData> 
}

export type GetAllMapPointsQueryResult = NonNullable<Awaited<ReturnType<typeof getAllMapPoints>>>
export type GetAllMapPointsQueryError = ErrorType<void>


/**
 * @summary Get all map points
 */

export function useGetAllMapPoints<TData = Awaited<ReturnType<typeof getAllMapPoints>>, TError = ErrorType<void>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllMapPoints>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient 
 ): UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetAllMapPointsQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = unref(queryOptions).queryKey as DataTag<QueryKey, TData, TError>;

  return query;
}



/**
 * Creates a new map point in the system
 * @summary Create a new map point
 */
export const createMapPoint = (
    mapPoint: MaybeRef<MapPoint>,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      mapPoint = unref(mapPoint);
      
      return customInstance<MapPoint>(
      {url: `http://localhost:8080/api/map-points`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: mapPoint, signal
    },
      options);
    }
  


export const getCreateMapPointMutationOptions = <TError = ErrorType<void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createMapPoint>>, TError,{data: BodyType<MapPoint>}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof createMapPoint>>, TError,{data: BodyType<MapPoint>}, TContext> => {
    
const mutationKey = ['createMapPoint'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof createMapPoint>>, {data: BodyType<MapPoint>}> = (props) => {
          const {data} = props ?? {};

          return  createMapPoint(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CreateMapPointMutationResult = NonNullable<Awaited<ReturnType<typeof createMapPoint>>>
    export type CreateMapPointMutationBody = BodyType<MapPoint>
    export type CreateMapPointMutationError = ErrorType<void>

    /**
 * @summary Create a new map point
 */
export const useCreateMapPoint = <TError = ErrorType<void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createMapPoint>>, TError,{data: BodyType<MapPoint>}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationReturnType<
        Awaited<ReturnType<typeof createMapPoint>>,
        TError,
        {data: BodyType<MapPoint>},
        TContext
      > => {

      const mutationOptions = getCreateMapPointMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    