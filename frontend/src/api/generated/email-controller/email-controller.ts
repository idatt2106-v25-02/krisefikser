/**
 * Generated by orval v7.8.0 üç∫
 * Do not edit manually.
 * Krisefikser API
 * API for the Krisefikser application
 * OpenAPI spec version: 1.0
 */
import { useMutation } from '@tanstack/vue-query'
import type {
  MutationFunction,
  QueryClient,
  UseMutationOptions,
  UseMutationReturnType,
} from '@tanstack/vue-query'

import { unref } from 'vue'
import type { MaybeRef } from 'vue'

import type { EmailRequestDto } from '.././model'

import { customInstance } from '../../axios'
import type { ErrorType, BodyType } from '../../axios'

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1]

export const sendEmail = (
  emailRequestDto: MaybeRef<EmailRequestDto>,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  emailRequestDto = unref(emailRequestDto)

  return customInstance<string>(
    {
      url: `http://localhost:8080/api/email/send`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: emailRequestDto,
      signal,
    },
    options,
  )
}

export const getSendEmailMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof sendEmail>>,
    TError,
    { data: BodyType<EmailRequestDto> },
    TContext
  >
  request?: SecondParameter<typeof customInstance>
}): UseMutationOptions<
  Awaited<ReturnType<typeof sendEmail>>,
  TError,
  { data: BodyType<EmailRequestDto> },
  TContext
> => {
  const mutationKey = ['sendEmail']
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof sendEmail>>,
    { data: BodyType<EmailRequestDto> }
  > = (props) => {
    const { data } = props ?? {}

    return sendEmail(data, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type SendEmailMutationResult = NonNullable<Awaited<ReturnType<typeof sendEmail>>>
export type SendEmailMutationBody = BodyType<EmailRequestDto>
export type SendEmailMutationError = ErrorType<unknown>

export const useSendEmail = <TError = ErrorType<unknown>, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof sendEmail>>,
      TError,
      { data: BodyType<EmailRequestDto> },
      TContext
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient,
): UseMutationReturnType<
  Awaited<ReturnType<typeof sendEmail>>,
  TError,
  { data: BodyType<EmailRequestDto> },
  TContext
> => {
  const mutationOptions = getSendEmailMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}
