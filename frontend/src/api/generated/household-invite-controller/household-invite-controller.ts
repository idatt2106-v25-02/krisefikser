/**
 * Generated by orval v7.9.0 üç∫
 * Do not edit manually.
 * Krisefikser API
 * API for the Krisefikser application
 * OpenAPI spec version: 1.0
 */
import { useMutation, useQuery } from '@tanstack/vue-query'
import type {
  DataTag,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationReturnType,
  UseQueryOptions,
  UseQueryReturnType,
} from '@tanstack/vue-query'

import { computed, unref } from 'vue'
import type { MaybeRef } from 'vue'

import type { CreateHouseholdInviteRequest, HouseholdInviteResponse } from '.././model'

import { customInstance } from '../../axios'
import type { ErrorType, BodyType } from '../../axios'

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1]

/**
 * Creates a new invitation to join a household
 * @summary Create household invite
 */
export const createInvite = (
  createHouseholdInviteRequest: MaybeRef<CreateHouseholdInviteRequest>,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  createHouseholdInviteRequest = unref(createHouseholdInviteRequest)

  return customInstance<HouseholdInviteResponse>(
    {
      url: `http://localhost:8080/api/household-invites`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: createHouseholdInviteRequest,
      signal,
    },
    options,
  )
}

export const getCreateInviteMutationOptions = <
  TError = ErrorType<HouseholdInviteResponse>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createInvite>>,
    TError,
    { data: BodyType<CreateHouseholdInviteRequest> },
    TContext
  >
  request?: SecondParameter<typeof customInstance>
}): UseMutationOptions<
  Awaited<ReturnType<typeof createInvite>>,
  TError,
  { data: BodyType<CreateHouseholdInviteRequest> },
  TContext
> => {
  const mutationKey = ['createInvite']
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof createInvite>>,
    { data: BodyType<CreateHouseholdInviteRequest> }
  > = (props) => {
    const { data } = props ?? {}

    return createInvite(data, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type CreateInviteMutationResult = NonNullable<Awaited<ReturnType<typeof createInvite>>>
export type CreateInviteMutationBody = BodyType<CreateHouseholdInviteRequest>
export type CreateInviteMutationError = ErrorType<HouseholdInviteResponse>

/**
 * @summary Create household invite
 */
export const useCreateInvite = <TError = ErrorType<HouseholdInviteResponse>, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof createInvite>>,
      TError,
      { data: BodyType<CreateHouseholdInviteRequest> },
      TContext
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient,
): UseMutationReturnType<
  Awaited<ReturnType<typeof createInvite>>,
  TError,
  { data: BodyType<CreateHouseholdInviteRequest> },
  TContext
> => {
  const mutationOptions = getCreateInviteMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}
/**
 * Declines an invitation to join a household
 * @summary Decline household invite
 */
export const declineInvite = (
  inviteId: MaybeRef<string>,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  inviteId = unref(inviteId)

  return customInstance<HouseholdInviteResponse>(
    {
      url: `http://localhost:8080/api/household-invites/${inviteId}/decline`,
      method: 'POST',
      signal,
    },
    options,
  )
}

export const getDeclineInviteMutationOptions = <
  TError = ErrorType<HouseholdInviteResponse>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof declineInvite>>,
    TError,
    { inviteId: string },
    TContext
  >
  request?: SecondParameter<typeof customInstance>
}): UseMutationOptions<
  Awaited<ReturnType<typeof declineInvite>>,
  TError,
  { inviteId: string },
  TContext
> => {
  const mutationKey = ['declineInvite']
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof declineInvite>>,
    { inviteId: string }
  > = (props) => {
    const { inviteId } = props ?? {}

    return declineInvite(inviteId, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type DeclineInviteMutationResult = NonNullable<Awaited<ReturnType<typeof declineInvite>>>

export type DeclineInviteMutationError = ErrorType<HouseholdInviteResponse>

/**
 * @summary Decline household invite
 */
export const useDeclineInvite = <TError = ErrorType<HouseholdInviteResponse>, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof declineInvite>>,
      TError,
      { inviteId: string },
      TContext
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient,
): UseMutationReturnType<
  Awaited<ReturnType<typeof declineInvite>>,
  TError,
  { inviteId: string },
  TContext
> => {
  const mutationOptions = getDeclineInviteMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}
/**
 * Cancels a previously sent household invitation
 * @summary Cancel household invite
 */
export const cancelInvite = (
  inviteId: MaybeRef<string>,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  inviteId = unref(inviteId)

  return customInstance<HouseholdInviteResponse>(
    {
      url: `http://localhost:8080/api/household-invites/${inviteId}/cancel`,
      method: 'POST',
      signal,
    },
    options,
  )
}

export const getCancelInviteMutationOptions = <
  TError = ErrorType<HouseholdInviteResponse>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof cancelInvite>>,
    TError,
    { inviteId: string },
    TContext
  >
  request?: SecondParameter<typeof customInstance>
}): UseMutationOptions<
  Awaited<ReturnType<typeof cancelInvite>>,
  TError,
  { inviteId: string },
  TContext
> => {
  const mutationKey = ['cancelInvite']
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof cancelInvite>>,
    { inviteId: string }
  > = (props) => {
    const { inviteId } = props ?? {}

    return cancelInvite(inviteId, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type CancelInviteMutationResult = NonNullable<Awaited<ReturnType<typeof cancelInvite>>>

export type CancelInviteMutationError = ErrorType<HouseholdInviteResponse>

/**
 * @summary Cancel household invite
 */
export const useCancelInvite = <TError = ErrorType<HouseholdInviteResponse>, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof cancelInvite>>,
      TError,
      { inviteId: string },
      TContext
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient,
): UseMutationReturnType<
  Awaited<ReturnType<typeof cancelInvite>>,
  TError,
  { inviteId: string },
  TContext
> => {
  const mutationOptions = getCancelInviteMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}
/**
 * Accepts an invitation to join a household
 * @summary Accept household invite
 */
export const acceptInvite = (
  inviteId: MaybeRef<string>,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  inviteId = unref(inviteId)

  return customInstance<HouseholdInviteResponse>(
    {
      url: `http://localhost:8080/api/household-invites/${inviteId}/accept`,
      method: 'POST',
      signal,
    },
    options,
  )
}

export const getAcceptInviteMutationOptions = <
  TError = ErrorType<HouseholdInviteResponse>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof acceptInvite>>,
    TError,
    { inviteId: string },
    TContext
  >
  request?: SecondParameter<typeof customInstance>
}): UseMutationOptions<
  Awaited<ReturnType<typeof acceptInvite>>,
  TError,
  { inviteId: string },
  TContext
> => {
  const mutationKey = ['acceptInvite']
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof acceptInvite>>,
    { inviteId: string }
  > = (props) => {
    const { inviteId } = props ?? {}

    return acceptInvite(inviteId, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type AcceptInviteMutationResult = NonNullable<Awaited<ReturnType<typeof acceptInvite>>>

export type AcceptInviteMutationError = ErrorType<HouseholdInviteResponse>

/**
 * @summary Accept household invite
 */
export const useAcceptInvite = <TError = ErrorType<HouseholdInviteResponse>, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof acceptInvite>>,
      TError,
      { inviteId: string },
      TContext
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient,
): UseMutationReturnType<
  Awaited<ReturnType<typeof acceptInvite>>,
  TError,
  { inviteId: string },
  TContext
> => {
  const mutationOptions = getAcceptInviteMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}
/**
 * Retrieves all pending household invitations for the authenticated user
 * @summary Get pending invites for current user
 */
export const getPendingInvitesForUser = (
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<HouseholdInviteResponse[]>(
    { url: `http://localhost:8080/api/household-invites/pending`, method: 'GET', signal },
    options,
  )
}

export const getGetPendingInvitesForUserQueryKey = () => {
  return ['http:', 'localhost:8080', 'api', 'household-invites', 'pending'] as const
}

export const getGetPendingInvitesForUserQueryOptions = <
  TData = Awaited<ReturnType<typeof getPendingInvitesForUser>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getPendingInvitesForUser>>, TError, TData>
  >
  request?: SecondParameter<typeof customInstance>
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = getGetPendingInvitesForUserQueryKey()

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getPendingInvitesForUser>>> = ({
    signal,
  }) => getPendingInvitesForUser(requestOptions, signal)

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getPendingInvitesForUser>>,
    TError,
    TData
  >
}

export type GetPendingInvitesForUserQueryResult = NonNullable<
  Awaited<ReturnType<typeof getPendingInvitesForUser>>
>
export type GetPendingInvitesForUserQueryError = ErrorType<unknown>

/**
 * @summary Get pending invites for current user
 */

export function useGetPendingInvitesForUser<
  TData = Awaited<ReturnType<typeof getPendingInvitesForUser>>,
  TError = ErrorType<unknown>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getPendingInvitesForUser>>, TError, TData>
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient,
): UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getGetPendingInvitesForUserQueryOptions(options)

  const query = useQuery(queryOptions, queryClient) as UseQueryReturnType<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>
  }

  query.queryKey = unref(queryOptions).queryKey as DataTag<QueryKey, TData, TError>

  return query
}

/**
 * Retrieves all invitations (pending, accepted, declined) for a specific household
 * @summary Get all invites for household (Admin only)
 */
export const getAllInvitesForHousehold = (
  householdId: MaybeRef<string>,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  householdId = unref(householdId)

  return customInstance<HouseholdInviteResponse[]>(
    {
      url: `http://localhost:8080/api/household-invites/household/${householdId}`,
      method: 'GET',
      signal,
    },
    options,
  )
}

export const getGetAllInvitesForHouseholdQueryKey = (householdId: MaybeRef<string>) => {
  return ['http:', 'localhost:8080', 'api', 'household-invites', 'household', householdId] as const
}

export const getGetAllInvitesForHouseholdQueryOptions = <
  TData = Awaited<ReturnType<typeof getAllInvitesForHousehold>>,
  TError = ErrorType<HouseholdInviteResponse[]>,
>(
  householdId: MaybeRef<string>,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getAllInvitesForHousehold>>, TError, TData>
    >
    request?: SecondParameter<typeof customInstance>
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = getGetAllInvitesForHouseholdQueryKey(householdId)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getAllInvitesForHousehold>>> = ({
    signal,
  }) => getAllInvitesForHousehold(householdId, requestOptions, signal)

  return {
    queryKey,
    queryFn,
    enabled: computed(() => !!unref(householdId)),
    ...queryOptions,
  } as UseQueryOptions<Awaited<ReturnType<typeof getAllInvitesForHousehold>>, TError, TData>
}

export type GetAllInvitesForHouseholdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getAllInvitesForHousehold>>
>
export type GetAllInvitesForHouseholdQueryError = ErrorType<HouseholdInviteResponse[]>

/**
 * @summary Get all invites for household (Admin only)
 */

export function useGetAllInvitesForHousehold<
  TData = Awaited<ReturnType<typeof getAllInvitesForHousehold>>,
  TError = ErrorType<HouseholdInviteResponse[]>,
>(
  householdId: MaybeRef<string>,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getAllInvitesForHousehold>>, TError, TData>
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient,
): UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getGetAllInvitesForHouseholdQueryOptions(householdId, options)

  const query = useQuery(queryOptions, queryClient) as UseQueryReturnType<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>
  }

  query.queryKey = unref(queryOptions).queryKey as DataTag<QueryKey, TData, TError>

  return query
}

/**
 * Retrieves all pending invitations for a specific household
 * @summary Get pending invites for household
 */
export const getPendingInvitesForHousehold = (
  householdId: MaybeRef<string>,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  householdId = unref(householdId)

  return customInstance<HouseholdInviteResponse[]>(
    {
      url: `http://localhost:8080/api/household-invites/household/${householdId}/pending`,
      method: 'GET',
      signal,
    },
    options,
  )
}

export const getGetPendingInvitesForHouseholdQueryKey = (householdId: MaybeRef<string>) => {
  return [
    'http:',
    'localhost:8080',
    'api',
    'household-invites',
    'household',
    householdId,
    'pending',
  ] as const
}

export const getGetPendingInvitesForHouseholdQueryOptions = <
  TData = Awaited<ReturnType<typeof getPendingInvitesForHousehold>>,
  TError = ErrorType<HouseholdInviteResponse[]>,
>(
  householdId: MaybeRef<string>,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getPendingInvitesForHousehold>>, TError, TData>
    >
    request?: SecondParameter<typeof customInstance>
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = getGetPendingInvitesForHouseholdQueryKey(householdId)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getPendingInvitesForHousehold>>> = ({
    signal,
  }) => getPendingInvitesForHousehold(householdId, requestOptions, signal)

  return {
    queryKey,
    queryFn,
    enabled: computed(() => !!unref(householdId)),
    ...queryOptions,
  } as UseQueryOptions<Awaited<ReturnType<typeof getPendingInvitesForHousehold>>, TError, TData>
}

export type GetPendingInvitesForHouseholdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getPendingInvitesForHousehold>>
>
export type GetPendingInvitesForHouseholdQueryError = ErrorType<HouseholdInviteResponse[]>

/**
 * @summary Get pending invites for household
 */

export function useGetPendingInvitesForHousehold<
  TData = Awaited<ReturnType<typeof getPendingInvitesForHousehold>>,
  TError = ErrorType<HouseholdInviteResponse[]>,
>(
  householdId: MaybeRef<string>,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getPendingInvitesForHousehold>>, TError, TData>
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient,
): UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getGetPendingInvitesForHouseholdQueryOptions(householdId, options)

  const query = useQuery(queryOptions, queryClient) as UseQueryReturnType<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>
  }

  query.queryKey = unref(queryOptions).queryKey as DataTag<QueryKey, TData, TError>

  return query
}
