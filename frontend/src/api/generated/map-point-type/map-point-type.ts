/**
 * Generated by orval v7.9.0 üç∫
 * Do not edit manually.
 * Krisefikser API
 * API for the Krisefikser application
 * OpenAPI spec version: 1.0
 */
import { useMutation, useQuery } from '@tanstack/vue-query'
import type {
  DataTag,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationReturnType,
  UseQueryOptions,
  UseQueryReturnType,
} from '@tanstack/vue-query'

import { computed, unref } from 'vue'
import type { MaybeRef } from 'vue'

import type {
  MapPointTypeRequest,
  MapPointTypeResponse,
  UpdateMapPointTypeRequest,
} from '.././model'

import { customInstance } from '../../axios'
import type { ErrorType, BodyType } from '../../axios'

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1]

/**
 * Retrieves a specific map point type by its ID
 * @summary Get a map point type by ID
 */
export const getMapPointTypeById = (
  id: MaybeRef<number>,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  id = unref(id)

  return customInstance<MapPointTypeResponse>(
    { url: `http://localhost:8080/api/map-point-types/${id}`, method: 'GET', signal },
    options,
  )
}

export const getGetMapPointTypeByIdQueryKey = (id: MaybeRef<number>) => {
  return ['http:', 'localhost:8080', 'api', 'map-point-types', id] as const
}

export const getGetMapPointTypeByIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getMapPointTypeById>>,
  TError = ErrorType<void>,
>(
  id: MaybeRef<number>,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getMapPointTypeById>>, TError, TData>>
    request?: SecondParameter<typeof customInstance>
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = getGetMapPointTypeByIdQueryKey(id)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getMapPointTypeById>>> = ({ signal }) =>
    getMapPointTypeById(id, requestOptions, signal)

  return {
    queryKey,
    queryFn,
    enabled: computed(() => !!unref(id)),
    ...queryOptions,
  } as UseQueryOptions<Awaited<ReturnType<typeof getMapPointTypeById>>, TError, TData>
}

export type GetMapPointTypeByIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getMapPointTypeById>>
>
export type GetMapPointTypeByIdQueryError = ErrorType<void>

/**
 * @summary Get a map point type by ID
 */

export function useGetMapPointTypeById<
  TData = Awaited<ReturnType<typeof getMapPointTypeById>>,
  TError = ErrorType<void>,
>(
  id: MaybeRef<number>,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getMapPointTypeById>>, TError, TData>>
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient,
): UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getGetMapPointTypeByIdQueryOptions(id, options)

  const query = useQuery(queryOptions, queryClient) as UseQueryReturnType<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>
  }

  query.queryKey = unref(queryOptions).queryKey as DataTag<QueryKey, TData, TError>

  return query
}

/**
 * Updates an existing map point type by its ID
 * @summary Update a map point type
 */
export const updateMapPointType = (
  id: MaybeRef<number>,
  updateMapPointTypeRequest: MaybeRef<UpdateMapPointTypeRequest>,
  options?: SecondParameter<typeof customInstance>,
) => {
  id = unref(id)
  updateMapPointTypeRequest = unref(updateMapPointTypeRequest)

  return customInstance<MapPointTypeResponse>(
    {
      url: `http://localhost:8080/api/map-point-types/${id}`,
      method: 'PUT',
      headers: { 'Content-Type': 'application/json' },
      data: updateMapPointTypeRequest,
    },
    options,
  )
}

export const getUpdateMapPointTypeMutationOptions = <
  TError = ErrorType<void>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateMapPointType>>,
    TError,
    { id: number; data: BodyType<UpdateMapPointTypeRequest> },
    TContext
  >
  request?: SecondParameter<typeof customInstance>
}): UseMutationOptions<
  Awaited<ReturnType<typeof updateMapPointType>>,
  TError,
  { id: number; data: BodyType<UpdateMapPointTypeRequest> },
  TContext
> => {
  const mutationKey = ['updateMapPointType']
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof updateMapPointType>>,
    { id: number; data: BodyType<UpdateMapPointTypeRequest> }
  > = (props) => {
    const { id, data } = props ?? {}

    return updateMapPointType(id, data, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type UpdateMapPointTypeMutationResult = NonNullable<
  Awaited<ReturnType<typeof updateMapPointType>>
>
export type UpdateMapPointTypeMutationBody = BodyType<UpdateMapPointTypeRequest>
export type UpdateMapPointTypeMutationError = ErrorType<void>

/**
 * @summary Update a map point type
 */
export const useUpdateMapPointType = <TError = ErrorType<void>, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof updateMapPointType>>,
      TError,
      { id: number; data: BodyType<UpdateMapPointTypeRequest> },
      TContext
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient,
): UseMutationReturnType<
  Awaited<ReturnType<typeof updateMapPointType>>,
  TError,
  { id: number; data: BodyType<UpdateMapPointTypeRequest> },
  TContext
> => {
  const mutationOptions = getUpdateMapPointTypeMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}
/**
 * Deletes a map point type from the system
 * @summary Delete a map point type
 */
export const deleteMapPointType = (
  id: MaybeRef<number>,
  options?: SecondParameter<typeof customInstance>,
) => {
  id = unref(id)

  return customInstance<void>(
    { url: `http://localhost:8080/api/map-point-types/${id}`, method: 'DELETE' },
    options,
  )
}

export const getDeleteMapPointTypeMutationOptions = <
  TError = ErrorType<void>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteMapPointType>>,
    TError,
    { id: number },
    TContext
  >
  request?: SecondParameter<typeof customInstance>
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteMapPointType>>,
  TError,
  { id: number },
  TContext
> => {
  const mutationKey = ['deleteMapPointType']
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteMapPointType>>,
    { id: number }
  > = (props) => {
    const { id } = props ?? {}

    return deleteMapPointType(id, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type DeleteMapPointTypeMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteMapPointType>>
>

export type DeleteMapPointTypeMutationError = ErrorType<void>

/**
 * @summary Delete a map point type
 */
export const useDeleteMapPointType = <TError = ErrorType<void>, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof deleteMapPointType>>,
      TError,
      { id: number },
      TContext
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient,
): UseMutationReturnType<
  Awaited<ReturnType<typeof deleteMapPointType>>,
  TError,
  { id: number },
  TContext
> => {
  const mutationOptions = getDeleteMapPointTypeMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}
/**
 * Retrieves a list of all map point types in the system
 * @summary Get all map point types
 */
export const getAllMapPointTypes = (
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<MapPointTypeResponse>(
    { url: `http://localhost:8080/api/map-point-types`, method: 'GET', signal },
    options,
  )
}

export const getGetAllMapPointTypesQueryKey = () => {
  return ['http:', 'localhost:8080', 'api', 'map-point-types'] as const
}

export const getGetAllMapPointTypesQueryOptions = <
  TData = Awaited<ReturnType<typeof getAllMapPointTypes>>,
  TError = ErrorType<void>,
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllMapPointTypes>>, TError, TData>>
  request?: SecondParameter<typeof customInstance>
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = getGetAllMapPointTypesQueryKey()

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getAllMapPointTypes>>> = ({ signal }) =>
    getAllMapPointTypes(requestOptions, signal)

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getAllMapPointTypes>>,
    TError,
    TData
  >
}

export type GetAllMapPointTypesQueryResult = NonNullable<
  Awaited<ReturnType<typeof getAllMapPointTypes>>
>
export type GetAllMapPointTypesQueryError = ErrorType<void>

/**
 * @summary Get all map point types
 */

export function useGetAllMapPointTypes<
  TData = Awaited<ReturnType<typeof getAllMapPointTypes>>,
  TError = ErrorType<void>,
>(
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllMapPointTypes>>, TError, TData>>
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient,
): UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getGetAllMapPointTypesQueryOptions(options)

  const query = useQuery(queryOptions, queryClient) as UseQueryReturnType<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>
  }

  query.queryKey = unref(queryOptions).queryKey as DataTag<QueryKey, TData, TError>

  return query
}

/**
 * Creates a new map point type in the system
 * @summary Create a new map point type
 */
export const createMapPointType = (
  mapPointTypeRequest: MaybeRef<MapPointTypeRequest>,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  mapPointTypeRequest = unref(mapPointTypeRequest)

  return customInstance<MapPointTypeResponse>(
    {
      url: `http://localhost:8080/api/map-point-types`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: mapPointTypeRequest,
      signal,
    },
    options,
  )
}

export const getCreateMapPointTypeMutationOptions = <
  TError = ErrorType<void>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createMapPointType>>,
    TError,
    { data: BodyType<MapPointTypeRequest> },
    TContext
  >
  request?: SecondParameter<typeof customInstance>
}): UseMutationOptions<
  Awaited<ReturnType<typeof createMapPointType>>,
  TError,
  { data: BodyType<MapPointTypeRequest> },
  TContext
> => {
  const mutationKey = ['createMapPointType']
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof createMapPointType>>,
    { data: BodyType<MapPointTypeRequest> }
  > = (props) => {
    const { data } = props ?? {}

    return createMapPointType(data, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type CreateMapPointTypeMutationResult = NonNullable<
  Awaited<ReturnType<typeof createMapPointType>>
>
export type CreateMapPointTypeMutationBody = BodyType<MapPointTypeRequest>
export type CreateMapPointTypeMutationError = ErrorType<void>

/**
 * @summary Create a new map point type
 */
export const useCreateMapPointType = <TError = ErrorType<void>, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof createMapPointType>>,
      TError,
      { data: BodyType<MapPointTypeRequest> },
      TContext
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient,
): UseMutationReturnType<
  Awaited<ReturnType<typeof createMapPointType>>,
  TError,
  { data: BodyType<MapPointTypeRequest> },
  TContext
> => {
  const mutationOptions = getCreateMapPointTypeMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}
