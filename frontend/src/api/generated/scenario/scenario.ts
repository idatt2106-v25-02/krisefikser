/**
 * Generated by orval v7.8.0 üç∫
 * Do not edit manually.
 * Krisefikser API
 * API for the Krisefikser application
 * OpenAPI spec version: 1.0
 */
import { useMutation, useQuery } from '@tanstack/vue-query'
import type {
  DataTag,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationReturnType,
  UseQueryOptions,
  UseQueryReturnType,
} from '@tanstack/vue-query'

import { computed, unref } from 'vue'
import type { MaybeRef } from 'vue'

import type { CreateScenarioRequest, ScenarioResponse } from '.././model'

import { customInstance } from '../../axios'
import type { ErrorType, BodyType } from '../../axios'

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1]

/**
 * @summary Get a specific scenario by ID
 */
export const getScenarioById = (
  id: MaybeRef<string>,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  id = unref(id)

  return customInstance<ScenarioResponse>(
    { url: `http://localhost:8080/api/scenarios/${id}`, method: 'GET', signal },
    options,
  )
}

export const getGetScenarioByIdQueryKey = (id: MaybeRef<string>) => {
  return ['http:', 'localhost:8080', 'api', 'scenarios', id] as const
}

export const getGetScenarioByIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getScenarioById>>,
  TError = ErrorType<ScenarioResponse>,
>(
  id: MaybeRef<string>,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getScenarioById>>, TError, TData>>
    request?: SecondParameter<typeof customInstance>
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = getGetScenarioByIdQueryKey(id)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getScenarioById>>> = ({ signal }) =>
    getScenarioById(id, requestOptions, signal)

  return {
    queryKey,
    queryFn,
    enabled: computed(() => !!unref(id)),
    ...queryOptions,
  } as UseQueryOptions<Awaited<ReturnType<typeof getScenarioById>>, TError, TData>
}

export type GetScenarioByIdQueryResult = NonNullable<Awaited<ReturnType<typeof getScenarioById>>>
export type GetScenarioByIdQueryError = ErrorType<ScenarioResponse>

/**
 * @summary Get a specific scenario by ID
 */

export function useGetScenarioById<
  TData = Awaited<ReturnType<typeof getScenarioById>>,
  TError = ErrorType<ScenarioResponse>,
>(
  id: MaybeRef<string>,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getScenarioById>>, TError, TData>>
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient,
): UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getGetScenarioByIdQueryOptions(id, options)

  const query = useQuery(queryOptions, queryClient) as UseQueryReturnType<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>
  }

  query.queryKey = unref(queryOptions).queryKey as DataTag<QueryKey, TData, TError>

  return query
}

/**
 * @summary Update an existing scenario
 */
export const updateScenario = (
  id: MaybeRef<string>,
  createScenarioRequest: MaybeRef<CreateScenarioRequest>,
  options?: SecondParameter<typeof customInstance>,
) => {
  id = unref(id)
  createScenarioRequest = unref(createScenarioRequest)

  return customInstance<ScenarioResponse>(
    {
      url: `http://localhost:8080/api/scenarios/${id}`,
      method: 'PUT',
      headers: { 'Content-Type': 'application/json' },
      data: createScenarioRequest,
    },
    options,
  )
}

export const getUpdateScenarioMutationOptions = <
  TError = ErrorType<ScenarioResponse>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateScenario>>,
    TError,
    { id: string; data: BodyType<CreateScenarioRequest> },
    TContext
  >
  request?: SecondParameter<typeof customInstance>
}): UseMutationOptions<
  Awaited<ReturnType<typeof updateScenario>>,
  TError,
  { id: string; data: BodyType<CreateScenarioRequest> },
  TContext
> => {
  const mutationKey = ['updateScenario']
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof updateScenario>>,
    { id: string; data: BodyType<CreateScenarioRequest> }
  > = (props) => {
    const { id, data } = props ?? {}

    return updateScenario(id, data, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type UpdateScenarioMutationResult = NonNullable<Awaited<ReturnType<typeof updateScenario>>>
export type UpdateScenarioMutationBody = BodyType<CreateScenarioRequest>
export type UpdateScenarioMutationError = ErrorType<ScenarioResponse>

/**
 * @summary Update an existing scenario
 */
export const useUpdateScenario = <TError = ErrorType<ScenarioResponse>, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof updateScenario>>,
      TError,
      { id: string; data: BodyType<CreateScenarioRequest> },
      TContext
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient,
): UseMutationReturnType<
  Awaited<ReturnType<typeof updateScenario>>,
  TError,
  { id: string; data: BodyType<CreateScenarioRequest> },
  TContext
> => {
  const mutationOptions = getUpdateScenarioMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}
/**
 * @summary Delete a scenario
 */
export const deleteScenario = (
  id: MaybeRef<string>,
  options?: SecondParameter<typeof customInstance>,
) => {
  id = unref(id)

  return customInstance<void>(
    { url: `http://localhost:8080/api/scenarios/${id}`, method: 'DELETE' },
    options,
  )
}

export const getDeleteScenarioMutationOptions = <
  TError = ErrorType<void>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteScenario>>,
    TError,
    { id: string },
    TContext
  >
  request?: SecondParameter<typeof customInstance>
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteScenario>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationKey = ['deleteScenario']
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined }

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteScenario>>, { id: string }> = (
    props,
  ) => {
    const { id } = props ?? {}

    return deleteScenario(id, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type DeleteScenarioMutationResult = NonNullable<Awaited<ReturnType<typeof deleteScenario>>>

export type DeleteScenarioMutationError = ErrorType<void>

/**
 * @summary Delete a scenario
 */
export const useDeleteScenario = <TError = ErrorType<void>, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof deleteScenario>>,
      TError,
      { id: string },
      TContext
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient,
): UseMutationReturnType<
  Awaited<ReturnType<typeof deleteScenario>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationOptions = getDeleteScenarioMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}
/**
 * @summary Get all scenarios
 */
export const getAllScenarios = (
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<ScenarioResponse[]>(
    { url: `http://localhost:8080/api/scenarios`, method: 'GET', signal },
    options,
  )
}

export const getGetAllScenariosQueryKey = () => {
  return ['http:', 'localhost:8080', 'api', 'scenarios'] as const
}

export const getGetAllScenariosQueryOptions = <
  TData = Awaited<ReturnType<typeof getAllScenarios>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllScenarios>>, TError, TData>>
  request?: SecondParameter<typeof customInstance>
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = getGetAllScenariosQueryKey()

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getAllScenarios>>> = ({ signal }) =>
    getAllScenarios(requestOptions, signal)

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getAllScenarios>>,
    TError,
    TData
  >
}

export type GetAllScenariosQueryResult = NonNullable<Awaited<ReturnType<typeof getAllScenarios>>>
export type GetAllScenariosQueryError = ErrorType<unknown>

/**
 * @summary Get all scenarios
 */

export function useGetAllScenarios<
  TData = Awaited<ReturnType<typeof getAllScenarios>>,
  TError = ErrorType<unknown>,
>(
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllScenarios>>, TError, TData>>
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient,
): UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getGetAllScenariosQueryOptions(options)

  const query = useQuery(queryOptions, queryClient) as UseQueryReturnType<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>
  }

  query.queryKey = unref(queryOptions).queryKey as DataTag<QueryKey, TData, TError>

  return query
}

/**
 * @summary Create a new scenario
 */
export const createScenario = (
  createScenarioRequest: MaybeRef<CreateScenarioRequest>,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  createScenarioRequest = unref(createScenarioRequest)

  return customInstance<ScenarioResponse>(
    {
      url: `http://localhost:8080/api/scenarios`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: createScenarioRequest,
      signal,
    },
    options,
  )
}

export const getCreateScenarioMutationOptions = <
  TError = ErrorType<ScenarioResponse>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createScenario>>,
    TError,
    { data: BodyType<CreateScenarioRequest> },
    TContext
  >
  request?: SecondParameter<typeof customInstance>
}): UseMutationOptions<
  Awaited<ReturnType<typeof createScenario>>,
  TError,
  { data: BodyType<CreateScenarioRequest> },
  TContext
> => {
  const mutationKey = ['createScenario']
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof createScenario>>,
    { data: BodyType<CreateScenarioRequest> }
  > = (props) => {
    const { data } = props ?? {}

    return createScenario(data, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type CreateScenarioMutationResult = NonNullable<Awaited<ReturnType<typeof createScenario>>>
export type CreateScenarioMutationBody = BodyType<CreateScenarioRequest>
export type CreateScenarioMutationError = ErrorType<ScenarioResponse>

/**
 * @summary Create a new scenario
 */
export const useCreateScenario = <TError = ErrorType<ScenarioResponse>, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof createScenario>>,
      TError,
      { data: BodyType<CreateScenarioRequest> },
      TContext
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient,
): UseMutationReturnType<
  Awaited<ReturnType<typeof createScenario>>,
  TError,
  { data: BodyType<CreateScenarioRequest> },
  TContext
> => {
  const mutationOptions = getCreateScenarioMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}
